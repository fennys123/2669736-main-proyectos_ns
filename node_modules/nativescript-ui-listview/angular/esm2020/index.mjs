import { isIOS, LayoutBase, ObservableArray } from '@nativescript/core';
import { Component, Input, ElementRef, Inject, TemplateRef, HostListener, IterableDiffers, ViewContainerRef, Directive, EventEmitter, Output, Host, ContentChild, NgModule, ViewChild, NO_ERRORS_SCHEMA, ChangeDetectionStrategy, NgZone } from '@angular/core';
import { registerElement, extractSingleViewRecursive, NativeScriptRendererFactory, DetachedLoader } from '@nativescript/angular';
import { RadListView, ListViewLinearLayout, ListViewViewType, ListViewStaggeredLayout, ListViewGridLayout, ReorderHandle, NG_VIEW } from 'nativescript-ui-listview';
import * as i0 from "@angular/core";
import * as i1 from "@nativescript/angular";
function isListLikeIterable(obj) {
    if (!isJsObject(obj))
        return false;
    return (Array.isArray(obj) ||
        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
            Symbol.iterator in obj)); // JS Iterable have a Symbol.iterator prop
}
function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
}
export class ListItemContext extends ElementRef {
    constructor($implicit, item, index, even, odd, category) {
        super(item);
        this.$implicit = $implicit;
        this.item = item;
        this.index = index;
        this.even = even;
        this.odd = odd;
        this.category = category;
    }
}
export class RadListViewComponent {
    constructor(_elementRef, _iterableDiffers, _renderer, _ngZone) {
        this._elementRef = _elementRef;
        this._iterableDiffers = _iterableDiffers;
        this._renderer = _renderer;
        this._ngZone = _ngZone;
        this.setupItemView = new EventEmitter();
        this.autoReuseViews = false;
        this.changeAnimationsEnabled = true;
        this.viewPool = new Map();
        this.viewToTemplate = new WeakMap();
        this.viewToLoader = new WeakMap();
        this._listView = _elementRef.nativeElement;
        this._loaders = [];
        // We should consider setting this default value in the RadListView constructor.
        this._listView.listViewLayout = new ListViewLinearLayout();
        const component = this;
        this._listView.itemViewDisposer = () => {
            if (this.loader) {
                this.loader.clear();
            }
        };
        this._listView.nativeScriptViewAdded = (parent, child) => {
            // Consider exposing this in nativescript-angular as public API
            this._renderer.viewUtil.insertChild(parent, child);
        };
        this._listView.itemViewLoader = (viewType) => {
            return this._ngZone.run(() => {
                switch (viewType) {
                    case ListViewViewType.ItemView:
                        if (component._itemTemplate && this.loader) {
                            // this.loader.injector.get(ChangeDetectorRef).detach();
                            const typedView = this.getOrCreate(this._itemTemplate);
                            return typedView;
                        }
                        break;
                    case ListViewViewType.ItemSwipeView:
                        if (component._itemSwipeTemplate && this.loader) {
                            const nativeItem = this.loader.createEmbeddedView(component._itemSwipeTemplate, new ListItemContext(), 0);
                            const typedView = getItemViewRoot(nativeItem);
                            typedView[NG_VIEW] = nativeItem;
                            return typedView;
                        }
                        break;
                    case ListViewViewType.LoadOnDemandView:
                        if (component._loadOnDemandTemplate && this.loader) {
                            const viewRef = this.loader.createEmbeddedView(component._loadOnDemandTemplate, new ListItemContext(), 0);
                            this.detectChangesOnChild(viewRef, -1);
                            const nativeView = getItemViewRoot(viewRef);
                            nativeView[NG_VIEW] = viewRef;
                            return nativeView;
                        }
                        break;
                    case ListViewViewType.HeaderView:
                        if (component._headerTemplate && this.loader) {
                            const viewRef = this.loader.createEmbeddedView(component._headerTemplate, new ListItemContext(), 0);
                            this.detectChangesOnChild(viewRef, -1);
                            const nativeView = getItemViewRoot(viewRef);
                            nativeView[NG_VIEW] = viewRef;
                            return nativeView;
                        }
                        break;
                    case ListViewViewType.GroupView:
                        if (!this._listView.groupingFunction && this._listView._hasGroupingFunctionChanged) {
                            break;
                        }
                        if (component._groupTemplate && this.loader) {
                            const viewRef = this.loader.createEmbeddedView(component._groupTemplate, new ListItemContext(), 0);
                            this.detectChangesOnChild(viewRef, -1);
                            const nativeView = getItemViewRoot(viewRef);
                            nativeView[NG_VIEW] = viewRef;
                            return nativeView;
                        }
                        break;
                    case ListViewViewType.FooterView:
                        if (component._footerTemplate && this.loader) {
                            const viewRef = this.loader.createEmbeddedView(component._footerTemplate, new ListItemContext(), 0);
                            this.detectChangesOnChild(viewRef, -1);
                            const nativeView = getItemViewRoot(viewRef);
                            nativeView[NG_VIEW] = viewRef;
                            return nativeView;
                        }
                        break;
                }
            });
        };
    }
    detachedLoaderFactory() {
        const ref = this.loader.createComponent(DetachedLoader, {
            index: 0,
        });
        this.loader.detach(0);
        this._loaders.push(ref);
        return ref;
    }
    ngAfterViewInit() {
        this.setItemTemplates();
    }
    ngOnDestroy() {
        this._listView = null;
        this._loaders.forEach((l) => l.destroy());
        this._loaders = null;
        this.viewToLoader = null;
        this.viewToTemplate = null;
        this.viewPool = null;
        this._items = null;
        this._differ = null;
        this._headerTemplate = null;
        this._footerTemplate = null;
        this._itemTemplate = null;
        this._groupTemplate = null;
        this._itemSwipeTemplate = null;
        this._loadOnDemandTemplate = null;
        if (this._templateMap) {
            this._templateMap.clear();
        }
        this._templateMap = null;
    }
    get nativeElement() {
        return this._listView;
    }
    get listView() {
        return this._listView;
    }
    set loadOnDemandTemplate(value) {
        this._loadOnDemandTemplate = value;
        this._listView.refresh();
    }
    set headerTemplate(value) {
        this._headerTemplate = value;
        if (this._listView.ios) {
            this._listView.updateHeaderFooter();
        }
        else if (this._listView.android) {
            this._listView['_updateHeader']();
        }
    }
    set groupTemplate(value) {
        this._groupTemplate = value;
    }
    set footerTemplate(value) {
        this._footerTemplate = value;
        if (this._listView.ios) {
            this._listView.updateHeaderFooter();
        }
        else if (this._listView.android) {
            this._listView['_updateFooter']();
        }
    }
    set itemTemplate(value) {
        this._itemTemplate = value;
        this._listView.refresh();
    }
    set itemSwipeTemplate(value) {
        this._itemSwipeTemplate = value;
        this._listView.refresh();
    }
    set items(value) {
        this._items = value;
        let needDiffer = true;
        if (value instanceof ObservableArray) {
            needDiffer = false;
        }
        if (!this._differ) {
            if (needDiffer && isListLikeIterable(value)) {
                this._differ = this._iterableDiffers.find(this._items).create(this.trackBy || ((index, item) => item));
            }
            this._listView.items = this._items;
        }
    }
    ngDoCheck() {
        if (this._differ) {
            const changes = this._differ.diff(this._items);
            if (changes) {
                const changeCounters = {
                    added: 0,
                    moved: 0,
                    removed: 0,
                    changed: 0,
                };
                [
                    { fn: changes.forEachAddedItem, key: 'added' },
                    { fn: changes.forEachMovedItem, key: 'moved' },
                    { fn: changes.forEachRemovedItem, key: 'removed' },
                    { fn: changes.forEachIdentityChange, key: 'changed' },
                ].map(({ fn, key }) => {
                    const collector = [];
                    fn.bind(changes)((record) => {
                        if (typeof record.previousIndex === 'number' && typeof record.currentIndex === 'number') {
                            collector.push(`${record.previousIndex} -> ${record.currentIndex}`);
                        }
                        else {
                            collector.push(`${record.previousIndex || record.currentIndex || 0}`);
                        }
                        changeCounters[key]++;
                    });
                    return `${key}(${collector})`;
                });
                let previousItemCount = 0;
                for (const item in this._listView.items) {
                    previousItemCount++;
                }
                let incomingItemCount = 0;
                for (const item in this._items) {
                    incomingItemCount++;
                }
                const totalReplacement = (changeCounters.added === incomingItemCount && changeCounters.removed === previousItemCount) || changeCounters.added > incomingItemCount || changeCounters.removed > previousItemCount;
                if (!totalReplacement && isIOS) {
                    const collectionView = this._listView.nativeViewProtected;
                    if (collectionView) {
                        const _listView = this._listView;
                        const _items = this._items;
                        const processUpdates = () => {
                            let nativePaths = NSMutableArray.alloc().init();
                            changes.forEachRemovedItem((record) => {
                                nativePaths.addObject(NSIndexPath.indexPathForRowInSection(record.previousIndex, 0));
                            });
                            if (nativePaths.count) {
                                collectionView.deleteItemsAtIndexPaths(nativePaths);
                            }
                            nativePaths = NSMutableArray.alloc().init();
                            changes.forEachAddedItem((item) => {
                                nativePaths.addObject(NSIndexPath.indexPathForRowInSection(item.currentIndex, 0));
                            });
                            if (nativePaths.count) {
                                collectionView.insertItemsAtIndexPaths(nativePaths);
                            }
                            nativePaths = NSMutableArray.alloc().init();
                            changes.forEachMovedItem((item) => {
                                collectionView.moveItemAtIndexPathToIndexPath(NSIndexPath.indexPathForRowInSection(item.previousIndex, 0), NSIndexPath.indexPathForRowInSection(item.currentIndex, 0));
                            });
                            nativePaths = NSMutableArray.alloc().init();
                            changes.forEachIdentityChange((item) => {
                                nativePaths.addObject(NSIndexPath.indexPathForRowInSection(item.currentIndex, 0));
                            });
                            if (nativePaths.count) {
                                collectionView.reloadItemsAtIndexPaths(nativePaths);
                            }
                            _listView.items = _items;
                        };
                        if (this.changeAnimationsEnabled) {
                            collectionView.performBatchUpdatesCompletion(processUpdates, () => { });
                        }
                        else {
                            UIView.performWithoutAnimation(() => {
                                collectionView.performBatchUpdatesCompletion(processUpdates, () => { });
                            });
                        }
                    }
                }
                else {
                    this._listView.items = this._items;
                    this._listView.refresh();
                }
            }
        }
    }
    onItemLoadingInternal(args) {
        const index = args.index;
        const currentItem = args.view.bindingContext;
        let ngView = args.view[NG_VIEW];
        // Getting angular view from original element (in cases when ProxyViewContainer
        // is used NativeScript internally wraps it in a StackLayout)
        if (!ngView && args.view instanceof LayoutBase && args.view.getChildrenCount() > 0) {
            ngView = args.view.getChildAt(0)[NG_VIEW];
        }
        if (ngView) {
            this.setupViewRef(ngView, currentItem, index);
            if (args.android) {
                // ios implements the itemReappearingInternal event so we don't reattach, just detect changes until the view is shown
                this.attachChild(ngView);
            }
            this.detectChangesOnChild(ngView, index);
        }
    }
    onItemReappearingInternal(args) {
        if (!args.view) {
            return;
        }
        let ngView = args.view[NG_VIEW];
        // Getting angular view from original element (in cases when ProxyViewContainer
        // is used NativeScript internally wraps it in a StackLayout)
        if (!ngView && args.view instanceof LayoutBase && args.view.getChildrenCount() > 0) {
            ngView = args.view.getChildAt(0)[NG_VIEW];
        }
        // console.log('reappearing', args.view);
        if (ngView) {
            this.attachChild(ngView);
        }
    }
    onItemRecyclingInternal(args) {
        if (!args.view) {
            return;
        }
        let ngView = args.view[NG_VIEW];
        // Getting angular view from original element (in cases when ProxyViewContainer
        // is used NativeScript internally wraps it in a StackLayout)
        if (!ngView && args.view instanceof LayoutBase && args.view.getChildrenCount() > 0) {
            ngView = args.view.getChildAt(0)[NG_VIEW];
        }
        // console.log('recycling', args.view);
        if (ngView) {
            ngView.detach();
        }
    }
    onItemDisposingInternal(args) {
        if (!args.view) {
            return;
        }
        if (args.view.parent) {
            args.view.parent.removeChild(args.view);
        }
        // console.log('disposing');
        let ngView = args.view[NG_VIEW];
        // console.log('disposing', args.view);
        // Getting angular view from original element (in cases when ProxyViewContainer
        // is used NativeScript internally wraps it in a StackLayout)
        if (!ngView && args.view instanceof LayoutBase && args.view.getChildrenCount() > 0) {
            ngView = args.view.getChildAt(0)[NG_VIEW];
        }
        if (ngView) {
            ngView.detach();
            this.storeViewRef(ngView);
        }
    }
    setupViewRef(viewRef, data, index) {
        const context = viewRef.context;
        context.$implicit = data;
        context.item = data;
        context.category = data ? data.category : '';
        context.index = index;
        context.even = index % 2 === 0;
        context.odd = !context.even;
        this.setupItemView.next({ view: viewRef, data: data, index: index, context: context });
        // this.detectChangesOnChild(viewRef, -1);
    }
    setLayout(layout) {
        this._listView.listViewLayout = layout;
    }
    attachChild(viewRef) {
        const loader = this.viewToLoader.get(viewRef);
        if (loader && this.loader.indexOf(loader.hostView) === -1) {
            this.loader.insert(loader.hostView, 0);
            // this.loader.insert(viewRef, 0);
        }
        viewRef.reattach();
        viewRef.markForCheck();
    }
    detectChangesOnChild(viewRef, index) {
        // Manually detect changes in child view ref
        viewRef.markForCheck();
        viewRef.detectChanges();
    }
    setItemTemplates() {
        // The itemTemplateQuery may be changed after list items are added that contain <template> inside,
        // so cache and use only the original template to avoid errors.
        this.itemTemplate = this.itemTemplateQuery;
        if (this._templateMap) {
            const templates = [];
            this._templateMap.forEach((value) => {
                templates.push(value);
            });
            this.listView.itemTemplates = templates;
        }
    }
    registerTemplate(key, template) {
        if (!this._templateMap) {
            this._templateMap = new Map();
        }
        const keyedTemplate = {
            key,
            createView: () => {
                return this.getOrCreate(template);
            },
        };
        this._templateMap.set(key, keyedTemplate);
    }
    storeViewRef(viewRef) {
        const templateRef = this.viewToTemplate.get(viewRef);
        if (templateRef) {
            const scrap = this.viewPool.get(templateRef);
            if (scrap) {
                if (scrap.scrapHead.size >= scrap.scrapSize) {
                    viewRef.destroy();
                    this.viewToLoader.get(viewRef)?.destroy();
                }
                else {
                    scrap.scrapHead.add(viewRef);
                }
            }
        }
    }
    getOrCreate(templateRef) {
        return this._ngZone.run(() => {
            let viewRef = this.getView(templateRef);
            if (!viewRef) {
                const loader = this.detachedLoaderFactory();
                // viewRef = this.loader.createEmbeddedView(templateRef, new ListItemContext(), 0);
                viewRef = loader.instance.vc.createEmbeddedView(templateRef, new ListItemContext(), 0);
                this.viewToLoader.set(viewRef, loader);
                this.viewToTemplate.set(viewRef, templateRef);
            }
            viewRef.detach();
            const resultView = getItemViewRoot(viewRef);
            resultView[NG_VIEW] = viewRef;
            resultView.reusable = this.autoReuseViews;
            return resultView;
        });
    }
    getView(templateRef) {
        const pool = this.getViewPool(templateRef);
        while (pool.scrapHead.size > 0) {
            const viewRef = pool.scrapHead.values().next().value;
            pool.scrapHead.delete(viewRef);
            if (!viewRef.destroyed) {
                return viewRef;
            }
        }
        return null;
    }
    templatesChanges() {
        const templates = new Set([this._itemTemplate, this._groupTemplate, this._footerTemplate, this._headerTemplate, this._itemSwipeTemplate, this._loadOnDemandTemplate]);
        const toDelete = [];
        this.viewPool.forEach((v, key) => {
            if (!templates.has(key)) {
                v.scrapHead.forEach((viewRef) => {
                    viewRef.destroy();
                    this.viewToTemplate.delete(viewRef);
                });
                v.scrapHead.clear();
                toDelete.push(key);
            }
        });
        toDelete.forEach((k) => this.viewPool.delete(k));
    }
    getViewPool(templateRef) {
        if (!this.viewPool.has(templateRef)) {
            this.viewPool.set(templateRef, {
                scrapSize: this.autoReuseViews ? Infinity : 0,
                scrapHead: new Set(),
            });
        }
        return this.viewPool.get(templateRef);
    }
}
RadListViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: RadListViewComponent, deps: [{ token: ElementRef }, { token: IterableDiffers }, { token: NativeScriptRendererFactory }, { token: NgZone }], target: i0.ɵɵFactoryTarget.Component });
RadListViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.2", type: RadListViewComponent, selector: "RadListView", inputs: { autoReuseViews: "autoReuseViews", changeAnimationsEnabled: "changeAnimationsEnabled", trackBy: "trackBy", items: "items" }, outputs: { setupItemView: "setupItemView" }, host: { listeners: { "itemLoadingInternal": "onItemLoadingInternal($event)", "itemReappearingInternal": "onItemReappearingInternal($event)", "itemRecyclingInternal": "onItemRecyclingInternal($event)", "itemDisposingInternal": "onItemDisposingInternal($event)" } }, queries: [{ propertyName: "itemTemplateQuery", first: true, predicate: TemplateRef, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "loader", first: true, predicate: ["loader"], descendants: true, read: ViewContainerRef }], ngImport: i0, template: `
		<DetachedContainer>
			<ng-container #loader></ng-container>
		</DetachedContainer>
	`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: RadListViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'RadListView',
                    template: `
		<DetachedContainer>
			<ng-container #loader></ng-container>
		</DetachedContainer>
	`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.IterableDiffers, decorators: [{
                    type: Inject,
                    args: [IterableDiffers]
                }] }, { type: i1.NativeScriptRendererFactory, decorators: [{
                    type: Inject,
                    args: [NativeScriptRendererFactory]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }]; }, propDecorators: { loader: [{
                type: ViewChild,
                args: ['loader', { read: ViewContainerRef, static: false }]
            }], itemTemplateQuery: [{
                type: ContentChild,
                args: [TemplateRef, { read: TemplateRef, static: false }]
            }], setupItemView: [{
                type: Output
            }], autoReuseViews: [{
                type: Input
            }], changeAnimationsEnabled: [{
                type: Input
            }], trackBy: [{
                type: Input
            }], items: [{
                type: Input
            }], onItemLoadingInternal: [{
                type: HostListener,
                args: ['itemLoadingInternal', ['$event']]
            }], onItemReappearingInternal: [{
                type: HostListener,
                args: ['itemReappearingInternal', ['$event']]
            }], onItemRecyclingInternal: [{
                type: HostListener,
                args: ['itemRecyclingInternal', ['$event']]
            }], onItemDisposingInternal: [{
                type: HostListener,
                args: ['itemDisposingInternal', ['$event']]
            }] } });
export class ListViewLinearLayoutDirective {
    constructor() { }
}
ListViewLinearLayoutDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ListViewLinearLayoutDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
ListViewLinearLayoutDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: ListViewLinearLayoutDirective, selector: "ListViewLinearLayout", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ListViewLinearLayoutDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ListViewLinearLayout',
                }]
        }], ctorParameters: function () { return []; } });
export class ListViewGridLayoutDirective {
    constructor() { }
}
ListViewGridLayoutDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ListViewGridLayoutDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
ListViewGridLayoutDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: ListViewGridLayoutDirective, selector: "ListViewGridLayout", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ListViewGridLayoutDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ListViewGridLayout',
                }]
        }], ctorParameters: function () { return []; } });
export class ListViewStaggeredLayoutDirective {
    constructor() { }
}
ListViewStaggeredLayoutDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ListViewStaggeredLayoutDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
ListViewStaggeredLayoutDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: ListViewStaggeredLayoutDirective, selector: "ListViewStaggeredLayout", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ListViewStaggeredLayoutDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ListViewStaggeredLayout',
                }]
        }], ctorParameters: function () { return []; } });
export class ReorderHandleDirective {
    constructor() { }
}
ReorderHandleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ReorderHandleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
ReorderHandleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: ReorderHandleDirective, selector: "ReorderHandle", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ReorderHandleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ReorderHandle',
                }]
        }], ctorParameters: function () { return []; } });
export class TKListViewHeaderDirective {
    constructor(owner, template) {
        this.owner = owner;
        this.template = template;
    }
    ngOnInit() {
        this.owner.headerTemplate = this.template;
    }
}
TKListViewHeaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKListViewHeaderDirective, deps: [{ token: RadListViewComponent }, { token: TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
TKListViewHeaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: TKListViewHeaderDirective, selector: "[tkListViewHeader]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKListViewHeaderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tkListViewHeader]',
                }]
        }], ctorParameters: function () { return [{ type: RadListViewComponent, decorators: [{
                    type: Inject,
                    args: [RadListViewComponent]
                }] }, { type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }]; } });
export class TKListViewFooterDirective {
    constructor(owner, template) {
        this.owner = owner;
        this.template = template;
    }
    ngOnInit() {
        this.owner.footerTemplate = this.template;
    }
}
TKListViewFooterDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKListViewFooterDirective, deps: [{ token: RadListViewComponent }, { token: TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
TKListViewFooterDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: TKListViewFooterDirective, selector: "[tkListViewFooter]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKListViewFooterDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tkListViewFooter]',
                }]
        }], ctorParameters: function () { return [{ type: RadListViewComponent, decorators: [{
                    type: Inject,
                    args: [RadListViewComponent]
                }] }, { type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }]; } });
export class TKListViewItemSwipeDirective {
    constructor(owner, template) {
        this.owner = owner;
        this.template = template;
    }
    ngOnInit() {
        this.owner.itemSwipeTemplate = this.template;
    }
}
TKListViewItemSwipeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKListViewItemSwipeDirective, deps: [{ token: RadListViewComponent }, { token: TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
TKListViewItemSwipeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: TKListViewItemSwipeDirective, selector: "[tkListItemSwipeTemplate]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKListViewItemSwipeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tkListItemSwipeTemplate]',
                }]
        }], ctorParameters: function () { return [{ type: RadListViewComponent, decorators: [{
                    type: Inject,
                    args: [RadListViewComponent]
                }] }, { type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }]; } });
export class TKListViewItemDirective {
    constructor(owner, template) {
        this.owner = owner;
        this.template = template;
    }
    ngOnInit() {
        this.owner.itemTemplate = this.template;
    }
}
TKListViewItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKListViewItemDirective, deps: [{ token: RadListViewComponent }, { token: TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
TKListViewItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: TKListViewItemDirective, selector: "[tkListItemTemplate]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKListViewItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tkListItemTemplate]',
                }]
        }], ctorParameters: function () { return [{ type: RadListViewComponent, decorators: [{
                    type: Inject,
                    args: [RadListViewComponent]
                }] }, { type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }]; } });
export class TKGroupTemplateDirective {
    constructor(owner, template) {
        this.owner = owner;
        this.template = template;
    }
    ngOnInit() {
        this.owner.groupTemplate = this.template;
    }
}
TKGroupTemplateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKGroupTemplateDirective, deps: [{ token: RadListViewComponent }, { token: TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
TKGroupTemplateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: TKGroupTemplateDirective, selector: "[tkGroupTemplate]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKGroupTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tkGroupTemplate]',
                }]
        }], ctorParameters: function () { return [{ type: RadListViewComponent, decorators: [{
                    type: Inject,
                    args: [RadListViewComponent]
                }] }, { type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }]; } });
export class TKTemplateKeyDirective {
    constructor(templateRef, owner) {
        this.templateRef = templateRef;
        this.owner = owner;
    }
    set tkTemplateKey(value) {
        if (this.owner && this.templateRef) {
            this.owner.registerTemplate(value, this.templateRef);
        }
    }
}
TKTemplateKeyDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKTemplateKeyDirective, deps: [{ token: i0.TemplateRef }, { token: RadListViewComponent, host: true }], target: i0.ɵɵFactoryTarget.Directive });
TKTemplateKeyDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: TKTemplateKeyDirective, selector: "[tkTemplateKey]", inputs: { tkTemplateKey: "tkTemplateKey" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKTemplateKeyDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tkTemplateKey]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: RadListViewComponent, decorators: [{
                    type: Host
                }] }]; }, propDecorators: { tkTemplateKey: [{
                type: Input
            }] } });
export class TKListViewLoadOnDemandDirective {
    constructor(owner, template) {
        this.owner = owner;
        this.template = template;
    }
    ngOnInit() {
        this.owner.loadOnDemandTemplate = this.template;
    }
}
TKListViewLoadOnDemandDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKListViewLoadOnDemandDirective, deps: [{ token: RadListViewComponent }, { token: TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
TKListViewLoadOnDemandDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: TKListViewLoadOnDemandDirective, selector: "[tkListLoadOnDemandTemplate]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKListViewLoadOnDemandDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tkListLoadOnDemandTemplate]',
                }]
        }], ctorParameters: function () { return [{ type: RadListViewComponent, decorators: [{
                    type: Inject,
                    args: [RadListViewComponent]
                }] }, { type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }]; } });
export class TKListViewLayoutDirective {
    constructor(owner, _elementRef) {
        this.owner = owner;
        this._elementRef = _elementRef;
    }
    ngOnInit() {
        const layout = this._elementRef.nativeElement;
        this.owner.setLayout(layout);
    }
}
TKListViewLayoutDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKListViewLayoutDirective, deps: [{ token: RadListViewComponent }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TKListViewLayoutDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: TKListViewLayoutDirective, selector: "[tkListViewLayout]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TKListViewLayoutDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tkListViewLayout]',
                }]
        }], ctorParameters: function () { return [{ type: RadListViewComponent, decorators: [{
                    type: Inject,
                    args: [RadListViewComponent]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; } });
export function getItemViewRoot(viewRef, rootLocator = extractSingleViewRecursive) {
    return rootLocator(viewRef.rootNodes, 0);
}
export const LISTVIEW_DIRECTIVES = [RadListViewComponent, TKListViewItemDirective, TKListViewItemSwipeDirective, TKListViewHeaderDirective, TKListViewFooterDirective, TKListViewLoadOnDemandDirective, TKListViewLayoutDirective, ListViewGridLayoutDirective, ListViewStaggeredLayoutDirective, ReorderHandleDirective, ListViewLinearLayoutDirective, TKTemplateKeyDirective, TKGroupTemplateDirective];
registerElement('RadListView', () => RadListView);
registerElement('ListViewLinearLayout', () => ListViewLinearLayout);
registerElement('ListViewGridLayout', () => ListViewGridLayout);
registerElement('ListViewStaggeredLayout', () => ListViewStaggeredLayout);
registerElement('ReorderHandle', () => ReorderHandle);
export class NativeScriptUIListViewModule {
}
NativeScriptUIListViewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: NativeScriptUIListViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NativeScriptUIListViewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.2", ngImport: i0, type: NativeScriptUIListViewModule, declarations: [RadListViewComponent, TKListViewItemDirective, TKListViewItemSwipeDirective, TKListViewHeaderDirective, TKListViewFooterDirective, TKListViewLoadOnDemandDirective, TKListViewLayoutDirective, ListViewGridLayoutDirective, ListViewStaggeredLayoutDirective, ReorderHandleDirective, ListViewLinearLayoutDirective, TKTemplateKeyDirective, TKGroupTemplateDirective], exports: [RadListViewComponent, TKListViewItemDirective, TKListViewItemSwipeDirective, TKListViewHeaderDirective, TKListViewFooterDirective, TKListViewLoadOnDemandDirective, TKListViewLayoutDirective, ListViewGridLayoutDirective, ListViewStaggeredLayoutDirective, ReorderHandleDirective, ListViewLinearLayoutDirective, TKTemplateKeyDirective, TKGroupTemplateDirective] });
NativeScriptUIListViewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: NativeScriptUIListViewModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: NativeScriptUIListViewModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [LISTVIEW_DIRECTIVES],
                    exports: [LISTVIEW_DIRECTIVES],
                    schemas: [NO_ERRORS_SCHEMA],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy91aS1saXN0dmlldy9hbmd1bGFyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBdUIsS0FBSyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM3RixPQUFPLEVBQUUsU0FBUyxFQUFXLEtBQUssRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBbUIsWUFBWSxFQUFFLGVBQWUsRUFBcUMsZ0JBQWdCLEVBQUUsU0FBUyxFQUFVLFlBQVksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBb0IsUUFBUSxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSx1QkFBdUIsRUFBeUMsTUFBTSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUM1WSxPQUFPLEVBQUUsZUFBZSxFQUFlLDBCQUEwQixFQUFFLDJCQUEyQixFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlJLE9BQU8sRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQXNCLGdCQUFnQixFQUFFLHVCQUF1QixFQUFFLGtCQUFrQixFQUFFLGFBQWEsRUFBcUIsT0FBTyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7OztBQWlCM00sU0FBUyxrQkFBa0IsQ0FBQyxHQUFRO0lBQ25DLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDbkMsT0FBTyxDQUNOLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUFDLEdBQUcsWUFBWSxHQUFHLENBQUMsSUFBSSxvREFBb0Q7WUFDN0UsTUFBTSxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUMsQ0FDeEIsQ0FBQyxDQUFDLDBDQUEwQztBQUM5QyxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsQ0FBTTtJQUN6QixP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QUFDO0FBT3RELE1BQU0sT0FBTyw0QkFBNEI7O3lIQUE1Qiw0QkFBNEI7MEhBQTVCLDRCQUE0QixpQkFocEI1QixvQkFBb0IsRUF1a0JwQix1QkFBdUIsRUFYdkIsNEJBQTRCLEVBdEI1Qix5QkFBeUIsRUFXekIseUJBQXlCLEVBMER6QiwrQkFBK0IsRUFXL0IseUJBQXlCLEVBckd6QiwyQkFBMkIsRUFPM0IsZ0NBQWdDLEVBT2hDLHNCQUFzQixFQXJCdEIsNkJBQTZCLEVBbUY3QixzQkFBc0IsRUFYdEIsd0JBQXdCLGFBbGxCeEIsb0JBQW9CLEVBdWtCcEIsdUJBQXVCLEVBWHZCLDRCQUE0QixFQXRCNUIseUJBQXlCLEVBV3pCLHlCQUF5QixFQTBEekIsK0JBQStCLEVBVy9CLHlCQUF5QixFQXJHekIsMkJBQTJCLEVBTzNCLGdDQUFnQyxFQU9oQyxzQkFBc0IsRUFyQnRCLDZCQUE2QixFQW1GN0Isc0JBQXNCLEVBWHRCLHdCQUF3QjswSEE4RHhCLDRCQUE0QjsyRkFBNUIsNEJBQTRCO2tCQUx4QyxRQUFRO21CQUFDO29CQUNULFlBQVksRUFBRSxDQUFDLG1CQUFtQixDQUFDO29CQUNuQyxPQUFPLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztvQkFDOUIsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7aUJBQzNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlldywgS2V5ZWRUZW1wbGF0ZSwgaXNJT1MsIExheW91dEJhc2UsIE9ic2VydmFibGVBcnJheSB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5pbXBvcnQgeyBDb21wb25lbnQsIERvQ2hlY2ssIElucHV0LCBFbGVtZW50UmVmLCBJbmplY3QsIFRlbXBsYXRlUmVmLCBFbWJlZGRlZFZpZXdSZWYsIEhvc3RMaXN0ZW5lciwgSXRlcmFibGVEaWZmZXJzLCBJdGVyYWJsZURpZmZlciwgQ2hhbmdlRGV0ZWN0b3JSZWYsIFZpZXdDb250YWluZXJSZWYsIERpcmVjdGl2ZSwgT25Jbml0LCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgSG9zdCwgQ29udGVudENoaWxkLCBBZnRlckNvbnRlbnRJbml0LCBOZ01vZHVsZSwgVmlld0NoaWxkLCBOT19FUlJPUlNfU0NIRU1BLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgSXRlcmFibGVDaGFuZ2VSZWNvcmQsIFRyYWNrQnlGdW5jdGlvbiwgTmdab25lLCBDb21wb25lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHJlZ2lzdGVyRWxlbWVudCwgQ29tbWVudE5vZGUsIGV4dHJhY3RTaW5nbGVWaWV3UmVjdXJzaXZlLCBOYXRpdmVTY3JpcHRSZW5kZXJlckZhY3RvcnksIERldGFjaGVkTG9hZGVyIH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9hbmd1bGFyJztcbmltcG9ydCB7IFJhZExpc3RWaWV3LCBMaXN0Vmlld0xpbmVhckxheW91dCwgTGlzdFZpZXdMYXlvdXRCYXNlLCBMaXN0Vmlld1ZpZXdUeXBlLCBMaXN0Vmlld1N0YWdnZXJlZExheW91dCwgTGlzdFZpZXdHcmlkTGF5b3V0LCBSZW9yZGVySGFuZGxlLCBMaXN0Vmlld0V2ZW50RGF0YSwgTkdfVklFVyB9IGZyb20gJ25hdGl2ZXNjcmlwdC11aS1saXN0dmlldyc7XG5cbi8vIHtOfSB0eXBlcyBkZWNsYXJlZCBtYW51YWxseSBkdWUgdG8gbmdjIGNvbXBpbGVyIG5vdCB3YW50aW5nIGdsb2JhbCB0eXBlcyBibGVlZGluZyBpblxuZGVjbGFyZSBjbGFzcyBOU011dGFibGVBcnJheSB7XG5cdHN0YXRpYyBhbGxvYzogPFQ+KCkgPT4gTlNNdXRhYmxlQXJyYXk7XG5cdGNvdW50OiBudW1iZXI7XG5cdGluaXQ6ICgpID0+IE5TTXV0YWJsZUFycmF5O1xuXHRhZGRPYmplY3QodjogYW55KTogdm9pZDtcbn1cbmRlY2xhcmUgY2xhc3MgVUlWaWV3IHtcblx0c3RhdGljIHBlcmZvcm1XaXRob3V0QW5pbWF0aW9uKGM6ICgpID0+IHZvaWQpO1xufVxuZGVjbGFyZSBjbGFzcyBOU0luZGV4UGF0aCB7XG5cdHN0YXRpYyBpbmRleFBhdGhGb3JSb3dJblNlY3Rpb24oazogbnVtYmVyLCB2OiBudW1iZXIpOiB2b2lkO1xufVxuZGVjbGFyZSB0eXBlIFRLQ29sbGVjdGlvblZpZXcgPSBhbnk7XG5cbmZ1bmN0aW9uIGlzTGlzdExpa2VJdGVyYWJsZShvYmo6IGFueSk6IGJvb2xlYW4ge1xuXHRpZiAoIWlzSnNPYmplY3Qob2JqKSkgcmV0dXJuIGZhbHNlO1xuXHRyZXR1cm4gKFxuXHRcdEFycmF5LmlzQXJyYXkob2JqKSB8fFxuXHRcdCghKG9iaiBpbnN0YW5jZW9mIE1hcCkgJiYgLy8gSlMgTWFwIGFyZSBpdGVyYWJsZXMgYnV0IHJldHVybiBlbnRyaWVzIGFzIFtrLCB2XVxuXHRcdFx0U3ltYm9sLml0ZXJhdG9yIGluIG9iailcblx0KTsgLy8gSlMgSXRlcmFibGUgaGF2ZSBhIFN5bWJvbC5pdGVyYXRvciBwcm9wXG59XG5cbmZ1bmN0aW9uIGlzSnNPYmplY3QobzogYW55KTogYm9vbGVhbiB7XG5cdHJldHVybiBvICE9PSBudWxsICYmICh0eXBlb2YgbyA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgbyA9PT0gJ29iamVjdCcpO1xufVxuXG5leHBvcnQgY2xhc3MgTGlzdEl0ZW1Db250ZXh0IGV4dGVuZHMgRWxlbWVudFJlZiB7XG5cdGNvbnN0cnVjdG9yKHB1YmxpYyAkaW1wbGljaXQ/OiBhbnksIHB1YmxpYyBpdGVtPzogYW55LCBwdWJsaWMgaW5kZXg/OiBudW1iZXIsIHB1YmxpYyBldmVuPzogYm9vbGVhbiwgcHVibGljIG9kZD86IGJvb2xlYW4sIHB1YmxpYyBjYXRlZ29yeT86IHN0cmluZykge1xuXHRcdHN1cGVyKGl0ZW0pO1xuXHR9XG59XG5cbmV4cG9ydCB0eXBlIFJvb3RMb2NhdG9yID0gKG5vZGVzOiBBcnJheTxhbnk+LCBuZXN0TGV2ZWw6IG51bWJlcikgPT4gVmlldztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnUmFkTGlzdFZpZXcnLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxEZXRhY2hlZENvbnRhaW5lcj5cblx0XHRcdDxuZy1jb250YWluZXIgI2xvYWRlcj48L25nLWNvbnRhaW5lcj5cblx0XHQ8L0RldGFjaGVkQ29udGFpbmVyPlxuXHRgLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgUmFkTGlzdFZpZXdDb21wb25lbnQge1xuXHRwcml2YXRlIF9saXN0VmlldzogUmFkTGlzdFZpZXc7XG5cdHByaXZhdGUgX2l0ZW1zOiBhbnk7XG5cdHByaXZhdGUgX2RpZmZlcjogSXRlcmFibGVEaWZmZXI8YW55Pjtcblx0cHJpdmF0ZSBfbG9hZGVyczogQXJyYXk8Q29tcG9uZW50UmVmPERldGFjaGVkTG9hZGVyPj47XG5cblx0cHJpdmF0ZSBfaGVhZGVyVGVtcGxhdGU6IFRlbXBsYXRlUmVmPEVsZW1lbnRSZWY+O1xuXHRwcml2YXRlIF9mb290ZXJUZW1wbGF0ZTogVGVtcGxhdGVSZWY8RWxlbWVudFJlZj47XG5cdHByaXZhdGUgX2l0ZW1UZW1wbGF0ZTogVGVtcGxhdGVSZWY8RWxlbWVudFJlZj47XG5cdHByaXZhdGUgX2dyb3VwVGVtcGxhdGU6IFRlbXBsYXRlUmVmPEVsZW1lbnRSZWY+O1xuXHRwcml2YXRlIF9pdGVtU3dpcGVUZW1wbGF0ZTogVGVtcGxhdGVSZWY8RWxlbWVudFJlZj47XG5cdHByaXZhdGUgX2xvYWRPbkRlbWFuZFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxFbGVtZW50UmVmPjtcblx0cHJpdmF0ZSBfdGVtcGxhdGVNYXA6IE1hcDxzdHJpbmcsIEtleWVkVGVtcGxhdGU+O1xuXG5cdEBWaWV3Q2hpbGQoJ2xvYWRlcicsIHsgcmVhZDogVmlld0NvbnRhaW5lclJlZiwgc3RhdGljOiBmYWxzZSB9KSBsb2FkZXI6IFZpZXdDb250YWluZXJSZWY7XG5cdC8vIE5vdGU6IGBzdGF0aWM6IHRydWVgIC0gVGhpcyBpcyBub3QgZ29pbmcgdG8gYmUgc3VwcG9ydGVkIGluIEFuZ3VsYXIgOS5cblx0Ly8gVG8gbWlncmF0ZSB0aGlzIHdlIG5lZWQgdG8gY2hhbmdlIGBuZ0FmdGVyQ29udGVudEluaXRgIHRvIGBuZ0FmdGVyVmlld0luaXRgXG5cdEBDb250ZW50Q2hpbGQoVGVtcGxhdGVSZWYsIHsgcmVhZDogVGVtcGxhdGVSZWYsIHN0YXRpYzogZmFsc2UgfSkgaXRlbVRlbXBsYXRlUXVlcnk6IFRlbXBsYXRlUmVmPExpc3RJdGVtQ29udGV4dD47XG5cdEBPdXRwdXQoKSBwdWJsaWMgc2V0dXBJdGVtVmlldyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXHRASW5wdXQoKSBhdXRvUmV1c2VWaWV3cyA9IGZhbHNlO1xuXG5cdGRldGFjaGVkTG9hZGVyRmFjdG9yeSgpIHtcblx0XHRjb25zdCByZWYgPSB0aGlzLmxvYWRlci5jcmVhdGVDb21wb25lbnQoRGV0YWNoZWRMb2FkZXIsIHtcblx0XHRcdGluZGV4OiAwLFxuXHRcdH0pO1xuXHRcdHRoaXMubG9hZGVyLmRldGFjaCgwKTtcblx0XHR0aGlzLl9sb2FkZXJzLnB1c2gocmVmKTtcblx0XHRyZXR1cm4gcmVmO1xuXHR9XG5cblx0Y29uc3RydWN0b3IoQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLCBASW5qZWN0KEl0ZXJhYmxlRGlmZmVycykgcHJpdmF0ZSBfaXRlcmFibGVEaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIEBJbmplY3QoTmF0aXZlU2NyaXB0UmVuZGVyZXJGYWN0b3J5KSBwcml2YXRlIF9yZW5kZXJlcjogTmF0aXZlU2NyaXB0UmVuZGVyZXJGYWN0b3J5LCBASW5qZWN0KE5nWm9uZSkgcHJpdmF0ZSBfbmdab25lOiBOZ1pvbmUpIHtcblx0XHR0aGlzLl9saXN0VmlldyA9IF9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cdFx0dGhpcy5fbG9hZGVycyA9IFtdO1xuXG5cdFx0Ly8gV2Ugc2hvdWxkIGNvbnNpZGVyIHNldHRpbmcgdGhpcyBkZWZhdWx0IHZhbHVlIGluIHRoZSBSYWRMaXN0VmlldyBjb25zdHJ1Y3Rvci5cblx0XHR0aGlzLl9saXN0Vmlldy5saXN0Vmlld0xheW91dCA9IG5ldyBMaXN0Vmlld0xpbmVhckxheW91dCgpO1xuXG5cdFx0Y29uc3QgY29tcG9uZW50ID0gdGhpcztcblx0XHR0aGlzLl9saXN0Vmlldy5pdGVtVmlld0Rpc3Bvc2VyID0gKCk6IHZvaWQgPT4ge1xuXHRcdFx0aWYgKHRoaXMubG9hZGVyKSB7XG5cdFx0XHRcdHRoaXMubG9hZGVyLmNsZWFyKCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHRoaXMuX2xpc3RWaWV3Lm5hdGl2ZVNjcmlwdFZpZXdBZGRlZCA9IChwYXJlbnQ6IFZpZXcsIGNoaWxkOiBWaWV3KTogdm9pZCA9PiB7XG5cdFx0XHQvLyBDb25zaWRlciBleHBvc2luZyB0aGlzIGluIG5hdGl2ZXNjcmlwdC1hbmd1bGFyIGFzIHB1YmxpYyBBUElcblx0XHRcdCg8YW55PnRoaXMuX3JlbmRlcmVyKS52aWV3VXRpbC5pbnNlcnRDaGlsZChwYXJlbnQsIGNoaWxkKTtcblx0XHR9O1xuXG5cdFx0dGhpcy5fbGlzdFZpZXcuaXRlbVZpZXdMb2FkZXIgPSAodmlld1R5cGUpOiBWaWV3ID0+IHtcblx0XHRcdHJldHVybiB0aGlzLl9uZ1pvbmUucnVuKCgpID0+IHtcblx0XHRcdFx0c3dpdGNoICh2aWV3VHlwZSkge1xuXHRcdFx0XHRcdGNhc2UgTGlzdFZpZXdWaWV3VHlwZS5JdGVtVmlldzpcblx0XHRcdFx0XHRcdGlmIChjb21wb25lbnQuX2l0ZW1UZW1wbGF0ZSAmJiB0aGlzLmxvYWRlcikge1xuXHRcdFx0XHRcdFx0XHQvLyB0aGlzLmxvYWRlci5pbmplY3Rvci5nZXQoQ2hhbmdlRGV0ZWN0b3JSZWYpLmRldGFjaCgpO1xuXHRcdFx0XHRcdFx0XHRjb25zdCB0eXBlZFZpZXcgPSB0aGlzLmdldE9yQ3JlYXRlKHRoaXMuX2l0ZW1UZW1wbGF0ZSk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0eXBlZFZpZXc7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIExpc3RWaWV3Vmlld1R5cGUuSXRlbVN3aXBlVmlldzpcblx0XHRcdFx0XHRcdGlmIChjb21wb25lbnQuX2l0ZW1Td2lwZVRlbXBsYXRlICYmIHRoaXMubG9hZGVyKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IG5hdGl2ZUl0ZW0gPSB0aGlzLmxvYWRlci5jcmVhdGVFbWJlZGRlZFZpZXcoY29tcG9uZW50Ll9pdGVtU3dpcGVUZW1wbGF0ZSwgbmV3IExpc3RJdGVtQ29udGV4dCgpLCAwKTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgdHlwZWRWaWV3ID0gZ2V0SXRlbVZpZXdSb290KG5hdGl2ZUl0ZW0pO1xuXHRcdFx0XHRcdFx0XHR0eXBlZFZpZXdbTkdfVklFV10gPSBuYXRpdmVJdGVtO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHlwZWRWaWV3O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBMaXN0Vmlld1ZpZXdUeXBlLkxvYWRPbkRlbWFuZFZpZXc6XG5cdFx0XHRcdFx0XHRpZiAoY29tcG9uZW50Ll9sb2FkT25EZW1hbmRUZW1wbGF0ZSAmJiB0aGlzLmxvYWRlcikge1xuXHRcdFx0XHRcdFx0XHRjb25zdCB2aWV3UmVmID0gdGhpcy5sb2FkZXIuY3JlYXRlRW1iZWRkZWRWaWV3KGNvbXBvbmVudC5fbG9hZE9uRGVtYW5kVGVtcGxhdGUsIG5ldyBMaXN0SXRlbUNvbnRleHQoKSwgMCk7XG5cdFx0XHRcdFx0XHRcdHRoaXMuZGV0ZWN0Q2hhbmdlc09uQ2hpbGQodmlld1JlZiwgLTEpO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBuYXRpdmVWaWV3ID0gZ2V0SXRlbVZpZXdSb290KHZpZXdSZWYpO1xuXHRcdFx0XHRcdFx0XHRuYXRpdmVWaWV3W05HX1ZJRVddID0gdmlld1JlZjtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIG5hdGl2ZVZpZXc7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIExpc3RWaWV3Vmlld1R5cGUuSGVhZGVyVmlldzpcblx0XHRcdFx0XHRcdGlmIChjb21wb25lbnQuX2hlYWRlclRlbXBsYXRlICYmIHRoaXMubG9hZGVyKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHZpZXdSZWYgPSB0aGlzLmxvYWRlci5jcmVhdGVFbWJlZGRlZFZpZXcoY29tcG9uZW50Ll9oZWFkZXJUZW1wbGF0ZSwgbmV3IExpc3RJdGVtQ29udGV4dCgpLCAwKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5kZXRlY3RDaGFuZ2VzT25DaGlsZCh2aWV3UmVmLCAtMSk7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IG5hdGl2ZVZpZXcgPSBnZXRJdGVtVmlld1Jvb3Qodmlld1JlZik7XG5cdFx0XHRcdFx0XHRcdG5hdGl2ZVZpZXdbTkdfVklFV10gPSB2aWV3UmVmO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gbmF0aXZlVmlldztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgTGlzdFZpZXdWaWV3VHlwZS5Hcm91cFZpZXc6XG5cdFx0XHRcdFx0XHRpZiAoIXRoaXMuX2xpc3RWaWV3Lmdyb3VwaW5nRnVuY3Rpb24gJiYgdGhpcy5fbGlzdFZpZXcuX2hhc0dyb3VwaW5nRnVuY3Rpb25DaGFuZ2VkKSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAoY29tcG9uZW50Ll9ncm91cFRlbXBsYXRlICYmIHRoaXMubG9hZGVyKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHZpZXdSZWYgPSB0aGlzLmxvYWRlci5jcmVhdGVFbWJlZGRlZFZpZXcoY29tcG9uZW50Ll9ncm91cFRlbXBsYXRlLCBuZXcgTGlzdEl0ZW1Db250ZXh0KCksIDApO1xuXHRcdFx0XHRcdFx0XHR0aGlzLmRldGVjdENoYW5nZXNPbkNoaWxkKHZpZXdSZWYsIC0xKTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgbmF0aXZlVmlldyA9IGdldEl0ZW1WaWV3Um9vdCh2aWV3UmVmKTtcblx0XHRcdFx0XHRcdFx0bmF0aXZlVmlld1tOR19WSUVXXSA9IHZpZXdSZWY7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBuYXRpdmVWaWV3O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBMaXN0Vmlld1ZpZXdUeXBlLkZvb3RlclZpZXc6XG5cdFx0XHRcdFx0XHRpZiAoY29tcG9uZW50Ll9mb290ZXJUZW1wbGF0ZSAmJiB0aGlzLmxvYWRlcikge1xuXHRcdFx0XHRcdFx0XHRjb25zdCB2aWV3UmVmID0gdGhpcy5sb2FkZXIuY3JlYXRlRW1iZWRkZWRWaWV3KGNvbXBvbmVudC5fZm9vdGVyVGVtcGxhdGUsIG5ldyBMaXN0SXRlbUNvbnRleHQoKSwgMCk7XG5cdFx0XHRcdFx0XHRcdHRoaXMuZGV0ZWN0Q2hhbmdlc09uQ2hpbGQodmlld1JlZiwgLTEpO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBuYXRpdmVWaWV3ID0gZ2V0SXRlbVZpZXdSb290KHZpZXdSZWYpO1xuXHRcdFx0XHRcdFx0XHRuYXRpdmVWaWV3W05HX1ZJRVddID0gdmlld1JlZjtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIG5hdGl2ZVZpZXc7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fTtcblx0fVxuXG5cdG5nQWZ0ZXJWaWV3SW5pdCgpIHtcblx0XHR0aGlzLnNldEl0ZW1UZW1wbGF0ZXMoKTtcblx0fVxuXG5cdG5nT25EZXN0cm95KCkge1xuXHRcdHRoaXMuX2xpc3RWaWV3ID0gbnVsbDtcblx0XHR0aGlzLl9sb2FkZXJzLmZvckVhY2goKGwpID0+IGwuZGVzdHJveSgpKTtcblx0XHR0aGlzLl9sb2FkZXJzID0gbnVsbDtcblx0XHR0aGlzLnZpZXdUb0xvYWRlciA9IG51bGw7XG5cdFx0dGhpcy52aWV3VG9UZW1wbGF0ZSA9IG51bGw7XG5cdFx0dGhpcy52aWV3UG9vbCA9IG51bGw7XG5cblx0XHR0aGlzLl9pdGVtcyA9IG51bGw7XG5cdFx0dGhpcy5fZGlmZmVyID0gbnVsbDtcblx0XHR0aGlzLl9oZWFkZXJUZW1wbGF0ZSA9IG51bGw7XG5cdFx0dGhpcy5fZm9vdGVyVGVtcGxhdGUgPSBudWxsO1xuXHRcdHRoaXMuX2l0ZW1UZW1wbGF0ZSA9IG51bGw7XG5cdFx0dGhpcy5fZ3JvdXBUZW1wbGF0ZSA9IG51bGw7XG5cdFx0dGhpcy5faXRlbVN3aXBlVGVtcGxhdGUgPSBudWxsO1xuXHRcdHRoaXMuX2xvYWRPbkRlbWFuZFRlbXBsYXRlID0gbnVsbDtcblx0XHRpZiAodGhpcy5fdGVtcGxhdGVNYXApIHtcblx0XHRcdHRoaXMuX3RlbXBsYXRlTWFwLmNsZWFyKCk7XG5cdFx0fVxuXHRcdHRoaXMuX3RlbXBsYXRlTWFwID0gbnVsbDtcblx0fVxuXG5cdHB1YmxpYyBnZXQgbmF0aXZlRWxlbWVudCgpOiBSYWRMaXN0VmlldyB7XG5cdFx0cmV0dXJuIHRoaXMuX2xpc3RWaWV3O1xuXHR9XG5cblx0cHVibGljIGdldCBsaXN0VmlldygpIHtcblx0XHRyZXR1cm4gdGhpcy5fbGlzdFZpZXc7XG5cdH1cblxuXHRzZXQgbG9hZE9uRGVtYW5kVGVtcGxhdGUodmFsdWU6IFRlbXBsYXRlUmVmPGFueT4pIHtcblx0XHR0aGlzLl9sb2FkT25EZW1hbmRUZW1wbGF0ZSA9IHZhbHVlO1xuXHRcdHRoaXMuX2xpc3RWaWV3LnJlZnJlc2goKTtcblx0fVxuXG5cdHNldCBoZWFkZXJUZW1wbGF0ZSh2YWx1ZTogVGVtcGxhdGVSZWY8RWxlbWVudFJlZj4pIHtcblx0XHR0aGlzLl9oZWFkZXJUZW1wbGF0ZSA9IHZhbHVlO1xuXHRcdGlmICh0aGlzLl9saXN0Vmlldy5pb3MpIHtcblx0XHRcdHRoaXMuX2xpc3RWaWV3LnVwZGF0ZUhlYWRlckZvb3RlcigpO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5fbGlzdFZpZXcuYW5kcm9pZCkge1xuXHRcdFx0dGhpcy5fbGlzdFZpZXdbJ191cGRhdGVIZWFkZXInXSgpO1xuXHRcdH1cblx0fVxuXG5cdHNldCBncm91cFRlbXBsYXRlKHZhbHVlOiBUZW1wbGF0ZVJlZjxFbGVtZW50UmVmPikge1xuXHRcdHRoaXMuX2dyb3VwVGVtcGxhdGUgPSB2YWx1ZTtcblx0fVxuXG5cdHNldCBmb290ZXJUZW1wbGF0ZSh2YWx1ZTogVGVtcGxhdGVSZWY8RWxlbWVudFJlZj4pIHtcblx0XHR0aGlzLl9mb290ZXJUZW1wbGF0ZSA9IHZhbHVlO1xuXHRcdGlmICh0aGlzLl9saXN0Vmlldy5pb3MpIHtcblx0XHRcdHRoaXMuX2xpc3RWaWV3LnVwZGF0ZUhlYWRlckZvb3RlcigpO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5fbGlzdFZpZXcuYW5kcm9pZCkge1xuXHRcdFx0dGhpcy5fbGlzdFZpZXdbJ191cGRhdGVGb290ZXInXSgpO1xuXHRcdH1cblx0fVxuXG5cdHNldCBpdGVtVGVtcGxhdGUodmFsdWU6IFRlbXBsYXRlUmVmPEVsZW1lbnRSZWY+KSB7XG5cdFx0dGhpcy5faXRlbVRlbXBsYXRlID0gdmFsdWU7XG5cdFx0dGhpcy5fbGlzdFZpZXcucmVmcmVzaCgpO1xuXHR9XG5cblx0c2V0IGl0ZW1Td2lwZVRlbXBsYXRlKHZhbHVlOiBUZW1wbGF0ZVJlZjxFbGVtZW50UmVmPikge1xuXHRcdHRoaXMuX2l0ZW1Td2lwZVRlbXBsYXRlID0gdmFsdWU7XG5cdFx0dGhpcy5fbGlzdFZpZXcucmVmcmVzaCgpO1xuXHR9XG5cblx0QElucHV0KCkgY2hhbmdlQW5pbWF0aW9uc0VuYWJsZWQ6IGJvb2xlYW4gPSB0cnVlO1xuXHRASW5wdXQoKSB0cmFja0J5OiBUcmFja0J5RnVuY3Rpb248YW55Pjtcblx0QElucHV0KCkgc2V0IGl0ZW1zKHZhbHVlOiBhbnkpIHtcblx0XHR0aGlzLl9pdGVtcyA9IHZhbHVlO1xuXG5cdFx0bGV0IG5lZWREaWZmZXIgPSB0cnVlO1xuXG5cdFx0aWYgKHZhbHVlIGluc3RhbmNlb2YgT2JzZXJ2YWJsZUFycmF5KSB7XG5cdFx0XHRuZWVkRGlmZmVyID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLl9kaWZmZXIpIHtcblx0XHRcdGlmIChuZWVkRGlmZmVyICYmIGlzTGlzdExpa2VJdGVyYWJsZSh2YWx1ZSkpIHtcblx0XHRcdFx0dGhpcy5fZGlmZmVyID0gdGhpcy5faXRlcmFibGVEaWZmZXJzLmZpbmQodGhpcy5faXRlbXMpLmNyZWF0ZSh0aGlzLnRyYWNrQnkgfHwgKChpbmRleCwgaXRlbSkgPT4gaXRlbSkpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fbGlzdFZpZXcuaXRlbXMgPSB0aGlzLl9pdGVtcztcblx0XHR9XG5cdH1cblxuXHRuZ0RvQ2hlY2soKSB7XG5cdFx0aWYgKHRoaXMuX2RpZmZlcikge1xuXHRcdFx0Y29uc3QgY2hhbmdlcyA9IHRoaXMuX2RpZmZlci5kaWZmKHRoaXMuX2l0ZW1zKTtcblx0XHRcdGlmIChjaGFuZ2VzKSB7XG5cdFx0XHRcdGNvbnN0IGNoYW5nZUNvdW50ZXJzID0ge1xuXHRcdFx0XHRcdGFkZGVkOiAwLFxuXHRcdFx0XHRcdG1vdmVkOiAwLFxuXHRcdFx0XHRcdHJlbW92ZWQ6IDAsXG5cdFx0XHRcdFx0Y2hhbmdlZDogMCxcblx0XHRcdFx0fTtcblx0XHRcdFx0W1xuXHRcdFx0XHRcdHsgZm46IGNoYW5nZXMuZm9yRWFjaEFkZGVkSXRlbSwga2V5OiAnYWRkZWQnIH0sXG5cdFx0XHRcdFx0eyBmbjogY2hhbmdlcy5mb3JFYWNoTW92ZWRJdGVtLCBrZXk6ICdtb3ZlZCcgfSxcblx0XHRcdFx0XHR7IGZuOiBjaGFuZ2VzLmZvckVhY2hSZW1vdmVkSXRlbSwga2V5OiAncmVtb3ZlZCcgfSxcblx0XHRcdFx0XHR7IGZuOiBjaGFuZ2VzLmZvckVhY2hJZGVudGl0eUNoYW5nZSwga2V5OiAnY2hhbmdlZCcgfSxcblx0XHRcdFx0XS5tYXAoKHsgZm4sIGtleSB9OiB7IGZuOiAoeDogKHJlY29yZDogSXRlcmFibGVDaGFuZ2VSZWNvcmQ8YW55PikgPT4gdm9pZCkgPT4gdm9pZDsga2V5OiBzdHJpbmcgfSkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IGNvbGxlY3Rvcjogc3RyaW5nW10gPSBbXTtcblx0XHRcdFx0XHRmbi5iaW5kKGNoYW5nZXMpKChyZWNvcmQ6IEl0ZXJhYmxlQ2hhbmdlUmVjb3JkPGFueT4pID0+IHtcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgcmVjb3JkLnByZXZpb3VzSW5kZXggPT09ICdudW1iZXInICYmIHR5cGVvZiByZWNvcmQuY3VycmVudEluZGV4ID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRcdFx0XHRjb2xsZWN0b3IucHVzaChgJHtyZWNvcmQucHJldmlvdXNJbmRleH0gLT4gJHtyZWNvcmQuY3VycmVudEluZGV4fWApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29sbGVjdG9yLnB1c2goYCR7cmVjb3JkLnByZXZpb3VzSW5kZXggfHwgcmVjb3JkLmN1cnJlbnRJbmRleCB8fCAwfWApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y2hhbmdlQ291bnRlcnNba2V5XSsrO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHJldHVybiBgJHtrZXl9KCR7Y29sbGVjdG9yfSlgO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRsZXQgcHJldmlvdXNJdGVtQ291bnQgPSAwO1xuXHRcdFx0XHRmb3IgKGNvbnN0IGl0ZW0gaW4gdGhpcy5fbGlzdFZpZXcuaXRlbXMpIHtcblx0XHRcdFx0XHRwcmV2aW91c0l0ZW1Db3VudCsrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxldCBpbmNvbWluZ0l0ZW1Db3VudCA9IDA7XG5cdFx0XHRcdGZvciAoY29uc3QgaXRlbSBpbiB0aGlzLl9pdGVtcykge1xuXHRcdFx0XHRcdGluY29taW5nSXRlbUNvdW50Kys7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgdG90YWxSZXBsYWNlbWVudCA9IChjaGFuZ2VDb3VudGVycy5hZGRlZCA9PT0gaW5jb21pbmdJdGVtQ291bnQgJiYgY2hhbmdlQ291bnRlcnMucmVtb3ZlZCA9PT0gcHJldmlvdXNJdGVtQ291bnQpIHx8IGNoYW5nZUNvdW50ZXJzLmFkZGVkID4gaW5jb21pbmdJdGVtQ291bnQgfHwgY2hhbmdlQ291bnRlcnMucmVtb3ZlZCA+IHByZXZpb3VzSXRlbUNvdW50O1xuXG5cdFx0XHRcdGlmICghdG90YWxSZXBsYWNlbWVudCAmJiBpc0lPUykge1xuXHRcdFx0XHRcdGNvbnN0IGNvbGxlY3Rpb25WaWV3OiBUS0NvbGxlY3Rpb25WaWV3ID0gdGhpcy5fbGlzdFZpZXcubmF0aXZlVmlld1Byb3RlY3RlZDtcblx0XHRcdFx0XHRpZiAoY29sbGVjdGlvblZpZXcpIHtcblx0XHRcdFx0XHRcdGNvbnN0IF9saXN0VmlldyA9IHRoaXMuX2xpc3RWaWV3O1xuXHRcdFx0XHRcdFx0Y29uc3QgX2l0ZW1zID0gdGhpcy5faXRlbXM7XG5cdFx0XHRcdFx0XHRjb25zdCBwcm9jZXNzVXBkYXRlcyA9ICgpID0+IHtcblx0XHRcdFx0XHRcdFx0bGV0IG5hdGl2ZVBhdGhzID0gTlNNdXRhYmxlQXJyYXkuYWxsb2M8TlNJbmRleFBhdGg+KCkuaW5pdCgpO1xuXHRcdFx0XHRcdFx0XHRjaGFuZ2VzLmZvckVhY2hSZW1vdmVkSXRlbSgocmVjb3JkOiBJdGVyYWJsZUNoYW5nZVJlY29yZDxhbnk+KSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0bmF0aXZlUGF0aHMuYWRkT2JqZWN0KE5TSW5kZXhQYXRoLmluZGV4UGF0aEZvclJvd0luU2VjdGlvbihyZWNvcmQucHJldmlvdXNJbmRleCwgMCkpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0aWYgKG5hdGl2ZVBhdGhzLmNvdW50KSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29sbGVjdGlvblZpZXcuZGVsZXRlSXRlbXNBdEluZGV4UGF0aHMobmF0aXZlUGF0aHMpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdG5hdGl2ZVBhdGhzID0gTlNNdXRhYmxlQXJyYXkuYWxsb2M8TlNJbmRleFBhdGg+KCkuaW5pdCgpO1xuXHRcdFx0XHRcdFx0XHRjaGFuZ2VzLmZvckVhY2hBZGRlZEl0ZW0oKGl0ZW0pID0+IHtcblx0XHRcdFx0XHRcdFx0XHRuYXRpdmVQYXRocy5hZGRPYmplY3QoTlNJbmRleFBhdGguaW5kZXhQYXRoRm9yUm93SW5TZWN0aW9uKGl0ZW0uY3VycmVudEluZGV4LCAwKSk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRpZiAobmF0aXZlUGF0aHMuY291bnQpIHtcblx0XHRcdFx0XHRcdFx0XHRjb2xsZWN0aW9uVmlldy5pbnNlcnRJdGVtc0F0SW5kZXhQYXRocyhuYXRpdmVQYXRocyk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0bmF0aXZlUGF0aHMgPSBOU011dGFibGVBcnJheS5hbGxvYzxOU0luZGV4UGF0aD4oKS5pbml0KCk7XG5cdFx0XHRcdFx0XHRcdGNoYW5nZXMuZm9yRWFjaE1vdmVkSXRlbSgoaXRlbSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGNvbGxlY3Rpb25WaWV3Lm1vdmVJdGVtQXRJbmRleFBhdGhUb0luZGV4UGF0aChOU0luZGV4UGF0aC5pbmRleFBhdGhGb3JSb3dJblNlY3Rpb24oaXRlbS5wcmV2aW91c0luZGV4LCAwKSwgTlNJbmRleFBhdGguaW5kZXhQYXRoRm9yUm93SW5TZWN0aW9uKGl0ZW0uY3VycmVudEluZGV4LCAwKSk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRuYXRpdmVQYXRocyA9IE5TTXV0YWJsZUFycmF5LmFsbG9jPE5TSW5kZXhQYXRoPigpLmluaXQoKTtcblx0XHRcdFx0XHRcdFx0Y2hhbmdlcy5mb3JFYWNoSWRlbnRpdHlDaGFuZ2UoKGl0ZW0pID0+IHtcblx0XHRcdFx0XHRcdFx0XHRuYXRpdmVQYXRocy5hZGRPYmplY3QoTlNJbmRleFBhdGguaW5kZXhQYXRoRm9yUm93SW5TZWN0aW9uKGl0ZW0uY3VycmVudEluZGV4LCAwKSk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRpZiAobmF0aXZlUGF0aHMuY291bnQpIHtcblx0XHRcdFx0XHRcdFx0XHRjb2xsZWN0aW9uVmlldy5yZWxvYWRJdGVtc0F0SW5kZXhQYXRocyhuYXRpdmVQYXRocyk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0X2xpc3RWaWV3Lml0ZW1zID0gX2l0ZW1zO1xuXHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuY2hhbmdlQW5pbWF0aW9uc0VuYWJsZWQpIHtcblx0XHRcdFx0XHRcdFx0Y29sbGVjdGlvblZpZXcucGVyZm9ybUJhdGNoVXBkYXRlc0NvbXBsZXRpb24ocHJvY2Vzc1VwZGF0ZXMsICgpID0+IHt9KTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFVJVmlldy5wZXJmb3JtV2l0aG91dEFuaW1hdGlvbigoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0Y29sbGVjdGlvblZpZXcucGVyZm9ybUJhdGNoVXBkYXRlc0NvbXBsZXRpb24ocHJvY2Vzc1VwZGF0ZXMsICgpID0+IHt9KTtcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuX2xpc3RWaWV3Lml0ZW1zID0gdGhpcy5faXRlbXM7XG5cdFx0XHRcdFx0dGhpcy5fbGlzdFZpZXcucmVmcmVzaCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0QEhvc3RMaXN0ZW5lcignaXRlbUxvYWRpbmdJbnRlcm5hbCcsIFsnJGV2ZW50J10pXG5cdHB1YmxpYyBvbkl0ZW1Mb2FkaW5nSW50ZXJuYWwoYXJnczogYW55KSB7XG5cdFx0Y29uc3QgaW5kZXggPSBhcmdzLmluZGV4O1xuXHRcdGNvbnN0IGN1cnJlbnRJdGVtID0gYXJncy52aWV3LmJpbmRpbmdDb250ZXh0O1xuXHRcdGxldCBuZ1ZpZXcgPSBhcmdzLnZpZXdbTkdfVklFV107XG5cblx0XHQvLyBHZXR0aW5nIGFuZ3VsYXIgdmlldyBmcm9tIG9yaWdpbmFsIGVsZW1lbnQgKGluIGNhc2VzIHdoZW4gUHJveHlWaWV3Q29udGFpbmVyXG5cdFx0Ly8gaXMgdXNlZCBOYXRpdmVTY3JpcHQgaW50ZXJuYWxseSB3cmFwcyBpdCBpbiBhIFN0YWNrTGF5b3V0KVxuXHRcdGlmICghbmdWaWV3ICYmIGFyZ3MudmlldyBpbnN0YW5jZW9mIExheW91dEJhc2UgJiYgYXJncy52aWV3LmdldENoaWxkcmVuQ291bnQoKSA+IDApIHtcblx0XHRcdG5nVmlldyA9IGFyZ3Mudmlldy5nZXRDaGlsZEF0KDApW05HX1ZJRVddO1xuXHRcdH1cblxuXHRcdGlmIChuZ1ZpZXcpIHtcblx0XHRcdHRoaXMuc2V0dXBWaWV3UmVmKG5nVmlldywgY3VycmVudEl0ZW0sIGluZGV4KTtcblx0XHRcdGlmIChhcmdzLmFuZHJvaWQpIHtcblx0XHRcdFx0Ly8gaW9zIGltcGxlbWVudHMgdGhlIGl0ZW1SZWFwcGVhcmluZ0ludGVybmFsIGV2ZW50IHNvIHdlIGRvbid0IHJlYXR0YWNoLCBqdXN0IGRldGVjdCBjaGFuZ2VzIHVudGlsIHRoZSB2aWV3IGlzIHNob3duXG5cdFx0XHRcdHRoaXMuYXR0YWNoQ2hpbGQobmdWaWV3KTtcblx0XHRcdH1cblx0XHRcdHRoaXMuZGV0ZWN0Q2hhbmdlc09uQ2hpbGQobmdWaWV3LCBpbmRleCk7XG5cdFx0fVxuXHR9XG5cblx0QEhvc3RMaXN0ZW5lcignaXRlbVJlYXBwZWFyaW5nSW50ZXJuYWwnLCBbJyRldmVudCddKVxuXHRwdWJsaWMgb25JdGVtUmVhcHBlYXJpbmdJbnRlcm5hbChhcmdzOiBhbnkpIHtcblx0XHRpZiAoIWFyZ3Mudmlldykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRsZXQgbmdWaWV3OiBFbWJlZGRlZFZpZXdSZWY8YW55PiA9IGFyZ3Mudmlld1tOR19WSUVXXTtcblxuXHRcdC8vIEdldHRpbmcgYW5ndWxhciB2aWV3IGZyb20gb3JpZ2luYWwgZWxlbWVudCAoaW4gY2FzZXMgd2hlbiBQcm94eVZpZXdDb250YWluZXJcblx0XHQvLyBpcyB1c2VkIE5hdGl2ZVNjcmlwdCBpbnRlcm5hbGx5IHdyYXBzIGl0IGluIGEgU3RhY2tMYXlvdXQpXG5cdFx0aWYgKCFuZ1ZpZXcgJiYgYXJncy52aWV3IGluc3RhbmNlb2YgTGF5b3V0QmFzZSAmJiBhcmdzLnZpZXcuZ2V0Q2hpbGRyZW5Db3VudCgpID4gMCkge1xuXHRcdFx0bmdWaWV3ID0gYXJncy52aWV3LmdldENoaWxkQXQoMClbTkdfVklFV107XG5cdFx0fVxuXHRcdC8vIGNvbnNvbGUubG9nKCdyZWFwcGVhcmluZycsIGFyZ3Mudmlldyk7XG5cblx0XHRpZiAobmdWaWV3KSB7XG5cdFx0XHR0aGlzLmF0dGFjaENoaWxkKG5nVmlldyk7XG5cdFx0fVxuXHR9XG5cblx0QEhvc3RMaXN0ZW5lcignaXRlbVJlY3ljbGluZ0ludGVybmFsJywgWyckZXZlbnQnXSlcblx0cHVibGljIG9uSXRlbVJlY3ljbGluZ0ludGVybmFsKGFyZ3M6IGFueSkge1xuXHRcdGlmICghYXJncy52aWV3KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGxldCBuZ1ZpZXc6IEVtYmVkZGVkVmlld1JlZjxhbnk+ID0gYXJncy52aWV3W05HX1ZJRVddO1xuXG5cdFx0Ly8gR2V0dGluZyBhbmd1bGFyIHZpZXcgZnJvbSBvcmlnaW5hbCBlbGVtZW50IChpbiBjYXNlcyB3aGVuIFByb3h5Vmlld0NvbnRhaW5lclxuXHRcdC8vIGlzIHVzZWQgTmF0aXZlU2NyaXB0IGludGVybmFsbHkgd3JhcHMgaXQgaW4gYSBTdGFja0xheW91dClcblx0XHRpZiAoIW5nVmlldyAmJiBhcmdzLnZpZXcgaW5zdGFuY2VvZiBMYXlvdXRCYXNlICYmIGFyZ3Mudmlldy5nZXRDaGlsZHJlbkNvdW50KCkgPiAwKSB7XG5cdFx0XHRuZ1ZpZXcgPSBhcmdzLnZpZXcuZ2V0Q2hpbGRBdCgwKVtOR19WSUVXXTtcblx0XHR9XG5cdFx0Ly8gY29uc29sZS5sb2coJ3JlY3ljbGluZycsIGFyZ3Mudmlldyk7XG5cblx0XHRpZiAobmdWaWV3KSB7XG5cdFx0XHRuZ1ZpZXcuZGV0YWNoKCk7XG5cdFx0fVxuXHR9XG5cblx0QEhvc3RMaXN0ZW5lcignaXRlbURpc3Bvc2luZ0ludGVybmFsJywgWyckZXZlbnQnXSlcblx0cHVibGljIG9uSXRlbURpc3Bvc2luZ0ludGVybmFsKGFyZ3M6IGFueSkge1xuXHRcdGlmICghYXJncy52aWV3KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmIChhcmdzLnZpZXcucGFyZW50KSB7XG5cdFx0XHRhcmdzLnZpZXcucGFyZW50LnJlbW92ZUNoaWxkKGFyZ3Mudmlldyk7XG5cdFx0fVxuXHRcdC8vIGNvbnNvbGUubG9nKCdkaXNwb3NpbmcnKTtcblx0XHRsZXQgbmdWaWV3OiBFbWJlZGRlZFZpZXdSZWY8YW55PiA9IGFyZ3Mudmlld1tOR19WSUVXXTtcblx0XHQvLyBjb25zb2xlLmxvZygnZGlzcG9zaW5nJywgYXJncy52aWV3KTtcblxuXHRcdC8vIEdldHRpbmcgYW5ndWxhciB2aWV3IGZyb20gb3JpZ2luYWwgZWxlbWVudCAoaW4gY2FzZXMgd2hlbiBQcm94eVZpZXdDb250YWluZXJcblx0XHQvLyBpcyB1c2VkIE5hdGl2ZVNjcmlwdCBpbnRlcm5hbGx5IHdyYXBzIGl0IGluIGEgU3RhY2tMYXlvdXQpXG5cdFx0aWYgKCFuZ1ZpZXcgJiYgYXJncy52aWV3IGluc3RhbmNlb2YgTGF5b3V0QmFzZSAmJiBhcmdzLnZpZXcuZ2V0Q2hpbGRyZW5Db3VudCgpID4gMCkge1xuXHRcdFx0bmdWaWV3ID0gYXJncy52aWV3LmdldENoaWxkQXQoMClbTkdfVklFV107XG5cdFx0fVxuXG5cdFx0aWYgKG5nVmlldykge1xuXHRcdFx0bmdWaWV3LmRldGFjaCgpO1xuXHRcdFx0dGhpcy5zdG9yZVZpZXdSZWYobmdWaWV3KTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgc2V0dXBWaWV3UmVmKHZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxhbnk+LCBkYXRhOiBhbnksIGluZGV4OiBudW1iZXIpOiB2b2lkIHtcblx0XHRjb25zdCBjb250ZXh0ID0gdmlld1JlZi5jb250ZXh0O1xuXHRcdGNvbnRleHQuJGltcGxpY2l0ID0gZGF0YTtcblx0XHRjb250ZXh0Lml0ZW0gPSBkYXRhO1xuXHRcdGNvbnRleHQuY2F0ZWdvcnkgPSBkYXRhID8gZGF0YS5jYXRlZ29yeSA6ICcnO1xuXHRcdGNvbnRleHQuaW5kZXggPSBpbmRleDtcblx0XHRjb250ZXh0LmV2ZW4gPSBpbmRleCAlIDIgPT09IDA7XG5cdFx0Y29udGV4dC5vZGQgPSAhY29udGV4dC5ldmVuO1xuXG5cdFx0dGhpcy5zZXR1cEl0ZW1WaWV3Lm5leHQoeyB2aWV3OiB2aWV3UmVmLCBkYXRhOiBkYXRhLCBpbmRleDogaW5kZXgsIGNvbnRleHQ6IGNvbnRleHQgfSk7XG5cdFx0Ly8gdGhpcy5kZXRlY3RDaGFuZ2VzT25DaGlsZCh2aWV3UmVmLCAtMSk7XG5cdH1cblxuXHRwdWJsaWMgc2V0TGF5b3V0KGxheW91dDogYW55KSB7XG5cdFx0dGhpcy5fbGlzdFZpZXcubGlzdFZpZXdMYXlvdXQgPSBsYXlvdXQ7XG5cdH1cblxuXHRwcml2YXRlIGF0dGFjaENoaWxkKHZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxMaXN0SXRlbUNvbnRleHQ+KSB7XG5cdFx0Y29uc3QgbG9hZGVyID0gdGhpcy52aWV3VG9Mb2FkZXIuZ2V0KHZpZXdSZWYpO1xuXHRcdGlmIChsb2FkZXIgJiYgdGhpcy5sb2FkZXIuaW5kZXhPZihsb2FkZXIuaG9zdFZpZXcpID09PSAtMSkge1xuXHRcdFx0dGhpcy5sb2FkZXIuaW5zZXJ0KGxvYWRlci5ob3N0VmlldywgMCk7XG5cdFx0XHQvLyB0aGlzLmxvYWRlci5pbnNlcnQodmlld1JlZiwgMCk7XG5cdFx0fVxuXHRcdHZpZXdSZWYucmVhdHRhY2goKTtcblx0XHR2aWV3UmVmLm1hcmtGb3JDaGVjaygpO1xuXHR9XG5cblx0cHJpdmF0ZSBkZXRlY3RDaGFuZ2VzT25DaGlsZCh2aWV3UmVmOiBFbWJlZGRlZFZpZXdSZWY8TGlzdEl0ZW1Db250ZXh0PiwgaW5kZXg6IG51bWJlcikge1xuXHRcdC8vIE1hbnVhbGx5IGRldGVjdCBjaGFuZ2VzIGluIGNoaWxkIHZpZXcgcmVmXG5cdFx0dmlld1JlZi5tYXJrRm9yQ2hlY2soKTtcblx0XHR2aWV3UmVmLmRldGVjdENoYW5nZXMoKTtcblx0fVxuXG5cdHByaXZhdGUgc2V0SXRlbVRlbXBsYXRlcygpIHtcblx0XHQvLyBUaGUgaXRlbVRlbXBsYXRlUXVlcnkgbWF5IGJlIGNoYW5nZWQgYWZ0ZXIgbGlzdCBpdGVtcyBhcmUgYWRkZWQgdGhhdCBjb250YWluIDx0ZW1wbGF0ZT4gaW5zaWRlLFxuXHRcdC8vIHNvIGNhY2hlIGFuZCB1c2Ugb25seSB0aGUgb3JpZ2luYWwgdGVtcGxhdGUgdG8gYXZvaWQgZXJyb3JzLlxuXHRcdHRoaXMuaXRlbVRlbXBsYXRlID0gdGhpcy5pdGVtVGVtcGxhdGVRdWVyeTtcblxuXHRcdGlmICh0aGlzLl90ZW1wbGF0ZU1hcCkge1xuXHRcdFx0Y29uc3QgdGVtcGxhdGVzOiBLZXllZFRlbXBsYXRlW10gPSBbXTtcblx0XHRcdHRoaXMuX3RlbXBsYXRlTWFwLmZvckVhY2goKHZhbHVlKSA9PiB7XG5cdFx0XHRcdHRlbXBsYXRlcy5wdXNoKHZhbHVlKTtcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5saXN0Vmlldy5pdGVtVGVtcGxhdGVzID0gdGVtcGxhdGVzO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyByZWdpc3RlclRlbXBsYXRlKGtleTogc3RyaW5nLCB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8TGlzdEl0ZW1Db250ZXh0Pikge1xuXHRcdGlmICghdGhpcy5fdGVtcGxhdGVNYXApIHtcblx0XHRcdHRoaXMuX3RlbXBsYXRlTWFwID0gbmV3IE1hcDxzdHJpbmcsIEtleWVkVGVtcGxhdGU+KCk7XG5cdFx0fVxuXG5cdFx0Y29uc3Qga2V5ZWRUZW1wbGF0ZSA9IHtcblx0XHRcdGtleSxcblx0XHRcdGNyZWF0ZVZpZXc6ICgpID0+IHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0T3JDcmVhdGUodGVtcGxhdGUpO1xuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0dGhpcy5fdGVtcGxhdGVNYXAuc2V0KGtleSwga2V5ZWRUZW1wbGF0ZSk7XG5cdH1cblxuXHR2aWV3UG9vbCA9IG5ldyBNYXA8XG5cdFx0VGVtcGxhdGVSZWY8TGlzdEl0ZW1Db250ZXh0Pixcblx0XHR7XG5cdFx0XHRzY3JhcFNpemU6IG51bWJlcjtcblx0XHRcdHNjcmFwSGVhZDogU2V0PEVtYmVkZGVkVmlld1JlZjxMaXN0SXRlbUNvbnRleHQ+Pjtcblx0XHR9XG5cdD4oKTtcblxuXHRwcml2YXRlIHN0b3JlVmlld1JlZih2aWV3UmVmOiBFbWJlZGRlZFZpZXdSZWY8YW55Pikge1xuXHRcdGNvbnN0IHRlbXBsYXRlUmVmID0gdGhpcy52aWV3VG9UZW1wbGF0ZS5nZXQodmlld1JlZik7XG5cdFx0aWYgKHRlbXBsYXRlUmVmKSB7XG5cdFx0XHRjb25zdCBzY3JhcCA9IHRoaXMudmlld1Bvb2wuZ2V0KHRlbXBsYXRlUmVmKTtcblx0XHRcdGlmIChzY3JhcCkge1xuXHRcdFx0XHRpZiAoc2NyYXAuc2NyYXBIZWFkLnNpemUgPj0gc2NyYXAuc2NyYXBTaXplKSB7XG5cdFx0XHRcdFx0dmlld1JlZi5kZXN0cm95KCk7XG5cdFx0XHRcdFx0dGhpcy52aWV3VG9Mb2FkZXIuZ2V0KHZpZXdSZWYpPy5kZXN0cm95KCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2NyYXAuc2NyYXBIZWFkLmFkZCh2aWV3UmVmKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHZpZXdUb1RlbXBsYXRlID0gbmV3IFdlYWtNYXA8RW1iZWRkZWRWaWV3UmVmPGFueT4sIFRlbXBsYXRlUmVmPGFueT4+KCk7XG5cdHZpZXdUb0xvYWRlciA9IG5ldyBXZWFrTWFwPEVtYmVkZGVkVmlld1JlZjxhbnk+LCBDb21wb25lbnRSZWY8RGV0YWNoZWRMb2FkZXI+PigpO1xuXG5cdHByaXZhdGUgZ2V0T3JDcmVhdGUodGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPExpc3RJdGVtQ29udGV4dD4pIHtcblx0XHRyZXR1cm4gdGhpcy5fbmdab25lLnJ1bigoKSA9PiB7XG5cdFx0XHRsZXQgdmlld1JlZiA9IHRoaXMuZ2V0Vmlldyh0ZW1wbGF0ZVJlZik7XG5cdFx0XHRpZiAoIXZpZXdSZWYpIHtcblx0XHRcdFx0Y29uc3QgbG9hZGVyID0gdGhpcy5kZXRhY2hlZExvYWRlckZhY3RvcnkoKTtcblx0XHRcdFx0Ly8gdmlld1JlZiA9IHRoaXMubG9hZGVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0ZW1wbGF0ZVJlZiwgbmV3IExpc3RJdGVtQ29udGV4dCgpLCAwKTtcblx0XHRcdFx0dmlld1JlZiA9IGxvYWRlci5pbnN0YW5jZS52Yy5jcmVhdGVFbWJlZGRlZFZpZXcodGVtcGxhdGVSZWYsIG5ldyBMaXN0SXRlbUNvbnRleHQoKSwgMCk7XG5cdFx0XHRcdHRoaXMudmlld1RvTG9hZGVyLnNldCh2aWV3UmVmLCBsb2FkZXIpO1xuXHRcdFx0XHR0aGlzLnZpZXdUb1RlbXBsYXRlLnNldCh2aWV3UmVmLCB0ZW1wbGF0ZVJlZik7XG5cdFx0XHR9XG5cdFx0XHR2aWV3UmVmLmRldGFjaCgpO1xuXHRcdFx0Y29uc3QgcmVzdWx0VmlldyA9IGdldEl0ZW1WaWV3Um9vdCh2aWV3UmVmKTtcblx0XHRcdHJlc3VsdFZpZXdbTkdfVklFV10gPSB2aWV3UmVmO1xuXHRcdFx0cmVzdWx0Vmlldy5yZXVzYWJsZSA9IHRoaXMuYXV0b1JldXNlVmlld3M7XG5cdFx0XHRyZXR1cm4gcmVzdWx0Vmlldztcblx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgZ2V0Vmlldyh0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8TGlzdEl0ZW1Db250ZXh0Pikge1xuXHRcdGNvbnN0IHBvb2wgPSB0aGlzLmdldFZpZXdQb29sKHRlbXBsYXRlUmVmKTtcblx0XHR3aGlsZSAocG9vbC5zY3JhcEhlYWQuc2l6ZSA+IDApIHtcblx0XHRcdGNvbnN0IHZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxMaXN0SXRlbUNvbnRleHQ+ID0gcG9vbC5zY3JhcEhlYWQudmFsdWVzKCkubmV4dCgpLnZhbHVlO1xuXHRcdFx0cG9vbC5zY3JhcEhlYWQuZGVsZXRlKHZpZXdSZWYpO1xuXHRcdFx0aWYgKCF2aWV3UmVmLmRlc3Ryb3llZCkge1xuXHRcdFx0XHRyZXR1cm4gdmlld1JlZjtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRwcml2YXRlIHRlbXBsYXRlc0NoYW5nZXMoKSB7XG5cdFx0Y29uc3QgdGVtcGxhdGVzID0gbmV3IFNldChbdGhpcy5faXRlbVRlbXBsYXRlLCB0aGlzLl9ncm91cFRlbXBsYXRlLCB0aGlzLl9mb290ZXJUZW1wbGF0ZSwgdGhpcy5faGVhZGVyVGVtcGxhdGUsIHRoaXMuX2l0ZW1Td2lwZVRlbXBsYXRlLCB0aGlzLl9sb2FkT25EZW1hbmRUZW1wbGF0ZV0pO1xuXHRcdGNvbnN0IHRvRGVsZXRlID0gW107XG5cdFx0dGhpcy52aWV3UG9vbC5mb3JFYWNoKCh2LCBrZXkpID0+IHtcblx0XHRcdGlmICghdGVtcGxhdGVzLmhhcyhrZXkpKSB7XG5cdFx0XHRcdHYuc2NyYXBIZWFkLmZvckVhY2goKHZpZXdSZWYpID0+IHtcblx0XHRcdFx0XHR2aWV3UmVmLmRlc3Ryb3koKTtcblx0XHRcdFx0XHR0aGlzLnZpZXdUb1RlbXBsYXRlLmRlbGV0ZSh2aWV3UmVmKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHYuc2NyYXBIZWFkLmNsZWFyKCk7XG5cdFx0XHRcdHRvRGVsZXRlLnB1c2goa2V5KTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHR0b0RlbGV0ZS5mb3JFYWNoKChrKSA9PiB0aGlzLnZpZXdQb29sLmRlbGV0ZShrKSk7XG5cdH1cblxuXHRwcml2YXRlIGdldFZpZXdQb29sKHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxMaXN0SXRlbUNvbnRleHQ+KSB7XG5cdFx0aWYgKCF0aGlzLnZpZXdQb29sLmhhcyh0ZW1wbGF0ZVJlZikpIHtcblx0XHRcdHRoaXMudmlld1Bvb2wuc2V0KHRlbXBsYXRlUmVmLCB7XG5cdFx0XHRcdHNjcmFwU2l6ZTogdGhpcy5hdXRvUmV1c2VWaWV3cyA/IEluZmluaXR5IDogMCxcblx0XHRcdFx0c2NyYXBIZWFkOiBuZXcgU2V0PEVtYmVkZGVkVmlld1JlZjxMaXN0SXRlbUNvbnRleHQ+PigpLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnZpZXdQb29sLmdldCh0ZW1wbGF0ZVJlZik7XG5cdH1cbn1cblxuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiAnTGlzdFZpZXdMaW5lYXJMYXlvdXQnLFxufSlcbmV4cG9ydCBjbGFzcyBMaXN0Vmlld0xpbmVhckxheW91dERpcmVjdGl2ZSB7XG5cdGNvbnN0cnVjdG9yKCkge31cbn1cblxuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiAnTGlzdFZpZXdHcmlkTGF5b3V0Jyxcbn0pXG5leHBvcnQgY2xhc3MgTGlzdFZpZXdHcmlkTGF5b3V0RGlyZWN0aXZlIHtcblx0Y29uc3RydWN0b3IoKSB7fVxufVxuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdMaXN0Vmlld1N0YWdnZXJlZExheW91dCcsXG59KVxuZXhwb3J0IGNsYXNzIExpc3RWaWV3U3RhZ2dlcmVkTGF5b3V0RGlyZWN0aXZlIHtcblx0Y29uc3RydWN0b3IoKSB7fVxufVxuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdSZW9yZGVySGFuZGxlJyxcbn0pXG5leHBvcnQgY2xhc3MgUmVvcmRlckhhbmRsZURpcmVjdGl2ZSB7XG5cdGNvbnN0cnVjdG9yKCkge31cbn1cblxuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiAnW3RrTGlzdFZpZXdIZWFkZXJdJyxcbn0pXG5leHBvcnQgY2xhc3MgVEtMaXN0Vmlld0hlYWRlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cdGNvbnN0cnVjdG9yKEBJbmplY3QoUmFkTGlzdFZpZXdDb21wb25lbnQpIHByaXZhdGUgb3duZXI6IFJhZExpc3RWaWV3Q29tcG9uZW50LCBASW5qZWN0KFRlbXBsYXRlUmVmKSBwcml2YXRlIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7fVxuXG5cdG5nT25Jbml0KCkge1xuXHRcdHRoaXMub3duZXIuaGVhZGVyVGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlO1xuXHR9XG59XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1t0a0xpc3RWaWV3Rm9vdGVyXScsXG59KVxuZXhwb3J0IGNsYXNzIFRLTGlzdFZpZXdGb290ZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuXHRjb25zdHJ1Y3RvcihASW5qZWN0KFJhZExpc3RWaWV3Q29tcG9uZW50KSBwcml2YXRlIG93bmVyOiBSYWRMaXN0Vmlld0NvbXBvbmVudCwgQEluamVjdChUZW1wbGF0ZVJlZikgcHJpdmF0ZSB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55Pikge31cblxuXHRuZ09uSW5pdCgpIHtcblx0XHR0aGlzLm93bmVyLmZvb3RlclRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZTtcblx0fVxufVxuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdbdGtMaXN0SXRlbVN3aXBlVGVtcGxhdGVdJyxcbn0pXG5leHBvcnQgY2xhc3MgVEtMaXN0Vmlld0l0ZW1Td2lwZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cdGNvbnN0cnVjdG9yKEBJbmplY3QoUmFkTGlzdFZpZXdDb21wb25lbnQpIHByaXZhdGUgb3duZXI6IFJhZExpc3RWaWV3Q29tcG9uZW50LCBASW5qZWN0KFRlbXBsYXRlUmVmKSBwcml2YXRlIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7fVxuXG5cdG5nT25Jbml0KCkge1xuXHRcdHRoaXMub3duZXIuaXRlbVN3aXBlVGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlO1xuXHR9XG59XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1t0a0xpc3RJdGVtVGVtcGxhdGVdJyxcbn0pXG5leHBvcnQgY2xhc3MgVEtMaXN0Vmlld0l0ZW1EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuXHRjb25zdHJ1Y3RvcihASW5qZWN0KFJhZExpc3RWaWV3Q29tcG9uZW50KSBwcml2YXRlIG93bmVyOiBSYWRMaXN0Vmlld0NvbXBvbmVudCwgQEluamVjdChUZW1wbGF0ZVJlZikgcHJpdmF0ZSB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55Pikge31cblxuXHRuZ09uSW5pdCgpIHtcblx0XHR0aGlzLm93bmVyLml0ZW1UZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGU7XG5cdH1cbn1cblxuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiAnW3RrR3JvdXBUZW1wbGF0ZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBUS0dyb3VwVGVtcGxhdGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuXHRjb25zdHJ1Y3RvcihASW5qZWN0KFJhZExpc3RWaWV3Q29tcG9uZW50KSBwcml2YXRlIG93bmVyOiBSYWRMaXN0Vmlld0NvbXBvbmVudCwgQEluamVjdChUZW1wbGF0ZVJlZikgcHJpdmF0ZSB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55Pikge31cblxuXHRuZ09uSW5pdCgpIHtcblx0XHR0aGlzLm93bmVyLmdyb3VwVGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlO1xuXHR9XG59XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1t0a1RlbXBsYXRlS2V5XScsXG59KVxuZXhwb3J0IGNsYXNzIFRLVGVtcGxhdGVLZXlEaXJlY3RpdmUge1xuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LCBASG9zdCgpIHByaXZhdGUgb3duZXI6IFJhZExpc3RWaWV3Q29tcG9uZW50KSB7fVxuXG5cdEBJbnB1dCgpXG5cdHNldCB0a1RlbXBsYXRlS2V5KHZhbHVlOiBhbnkpIHtcblx0XHRpZiAodGhpcy5vd25lciAmJiB0aGlzLnRlbXBsYXRlUmVmKSB7XG5cdFx0XHR0aGlzLm93bmVyLnJlZ2lzdGVyVGVtcGxhdGUodmFsdWUsIHRoaXMudGVtcGxhdGVSZWYpO1xuXHRcdH1cblx0fVxufVxuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdbdGtMaXN0TG9hZE9uRGVtYW5kVGVtcGxhdGVdJyxcbn0pXG5leHBvcnQgY2xhc3MgVEtMaXN0Vmlld0xvYWRPbkRlbWFuZERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cdGNvbnN0cnVjdG9yKEBJbmplY3QoUmFkTGlzdFZpZXdDb21wb25lbnQpIHByaXZhdGUgb3duZXI6IFJhZExpc3RWaWV3Q29tcG9uZW50LCBASW5qZWN0KFRlbXBsYXRlUmVmKSBwcml2YXRlIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7fVxuXG5cdG5nT25Jbml0KCkge1xuXHRcdHRoaXMub3duZXIubG9hZE9uRGVtYW5kVGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlO1xuXHR9XG59XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1t0a0xpc3RWaWV3TGF5b3V0XScsXG59KVxuZXhwb3J0IGNsYXNzIFRLTGlzdFZpZXdMYXlvdXREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuXHRjb25zdHJ1Y3RvcihASW5qZWN0KFJhZExpc3RWaWV3Q29tcG9uZW50KSBwcml2YXRlIG93bmVyOiBSYWRMaXN0Vmlld0NvbXBvbmVudCwgQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxuXG5cdG5nT25Jbml0KCkge1xuXHRcdGNvbnN0IGxheW91dCA9IHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcblx0XHR0aGlzLm93bmVyLnNldExheW91dChsYXlvdXQpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJdGVtVmlld1Jvb3Qodmlld1JlZjogRW1iZWRkZWRWaWV3UmVmPGFueT4sIHJvb3RMb2NhdG9yOiBSb290TG9jYXRvciA9IGV4dHJhY3RTaW5nbGVWaWV3UmVjdXJzaXZlKTogVmlldyB7XG5cdHJldHVybiByb290TG9jYXRvcih2aWV3UmVmLnJvb3ROb2RlcywgMCk7XG59XG5cbmV4cG9ydCBjb25zdCBMSVNUVklFV19ESVJFQ1RJVkVTID0gW1JhZExpc3RWaWV3Q29tcG9uZW50LCBUS0xpc3RWaWV3SXRlbURpcmVjdGl2ZSwgVEtMaXN0Vmlld0l0ZW1Td2lwZURpcmVjdGl2ZSwgVEtMaXN0Vmlld0hlYWRlckRpcmVjdGl2ZSwgVEtMaXN0Vmlld0Zvb3RlckRpcmVjdGl2ZSwgVEtMaXN0Vmlld0xvYWRPbkRlbWFuZERpcmVjdGl2ZSwgVEtMaXN0Vmlld0xheW91dERpcmVjdGl2ZSwgTGlzdFZpZXdHcmlkTGF5b3V0RGlyZWN0aXZlLCBMaXN0Vmlld1N0YWdnZXJlZExheW91dERpcmVjdGl2ZSwgUmVvcmRlckhhbmRsZURpcmVjdGl2ZSwgTGlzdFZpZXdMaW5lYXJMYXlvdXREaXJlY3RpdmUsIFRLVGVtcGxhdGVLZXlEaXJlY3RpdmUsIFRLR3JvdXBUZW1wbGF0ZURpcmVjdGl2ZV07XG5cbnJlZ2lzdGVyRWxlbWVudCgnUmFkTGlzdFZpZXcnLCAoKSA9PiBSYWRMaXN0Vmlldyk7XG5yZWdpc3RlckVsZW1lbnQoJ0xpc3RWaWV3TGluZWFyTGF5b3V0JywgKCkgPT4gPGFueT5MaXN0Vmlld0xpbmVhckxheW91dCk7XG5yZWdpc3RlckVsZW1lbnQoJ0xpc3RWaWV3R3JpZExheW91dCcsICgpID0+IDxhbnk+TGlzdFZpZXdHcmlkTGF5b3V0KTtcbnJlZ2lzdGVyRWxlbWVudCgnTGlzdFZpZXdTdGFnZ2VyZWRMYXlvdXQnLCAoKSA9PiA8YW55Pkxpc3RWaWV3U3RhZ2dlcmVkTGF5b3V0KTtcbnJlZ2lzdGVyRWxlbWVudCgnUmVvcmRlckhhbmRsZScsICgpID0+IFJlb3JkZXJIYW5kbGUpO1xuXG5ATmdNb2R1bGUoe1xuXHRkZWNsYXJhdGlvbnM6IFtMSVNUVklFV19ESVJFQ1RJVkVTXSxcblx0ZXhwb3J0czogW0xJU1RWSUVXX0RJUkVDVElWRVNdLFxuXHRzY2hlbWFzOiBbTk9fRVJST1JTX1NDSEVNQV0sXG59KVxuZXhwb3J0IGNsYXNzIE5hdGl2ZVNjcmlwdFVJTGlzdFZpZXdNb2R1bGUge31cbiJdfQ==