export * from './common';
import { View, Property, KeyedTemplate, Color } from '@nativescript/core';
import * as listViewCommonModule from './common';
export declare class ReorderHandle extends listViewCommonModule.ReorderHandle {
    constructor();
}
export declare class RadListView extends listViewCommonModule.RadListView {
    private _currentId;
    private _headerView;
    private _footerView;
    private _androidViewId;
    _android: com.telerik.widget.list.RadListView;
    private _rootLayout;
    private _selectionBehavior;
    private _reorderBehavior;
    private _loadOnDemandBehavior;
    private _swipeExecuteBehavior;
    private _swipeActionsBehavior;
    private _pullToRefreshBehavior;
    private _collapsibleGroupsBehavior;
    _listViewAdapter: any;
    private _scrolledPixels;
    private _footerViewHolderChildren;
    private _headerViewHolderChildren;
    private _loadOnDemandViewHolderChildren;
    _viewHolders: Array<com.telerik.widget.list.ListViewHolder>;
    _swipeHolders: Array<com.telerik.widget.list.ListViewHolder>;
    _viewHolderChildren: Array<View>;
    constructor();
    createNativeView(): globalAndroid.widget.FrameLayout;
    recycledViewPool: androidx.recyclerview.widget.RecyclerView.RecycledViewPool;
    recycledViewPoolDisposeListener: any;
    recyclerListener: androidx.recyclerview.widget.RecyclerView.RecyclerListener;
    private setupRecycler;
    initNativeView(): void;
    templateTypeNumberString: Map<string, number>;
    desiredPoolSize: Map<string, number>;
    _currentNativeItemType: number;
    templateKeyToNativeItem(key: string): number;
    nativeItemToTemplateKey(item: number): string;
    resetTemplateList(): void;
    defaultPoolSize: number;
    private setNativePoolSize;
    private setPoolSizes;
    setPoolSize(key: string, size: number): void;
    disposeNativeView(): void;
    _resetCurrentId(): void;
    _getUniqueItemId(): number;
    get androidListView(): com.telerik.widget.list.RadListView;
    get swipeActionsBehavior(): com.telerik.widget.list.SwipeActionsBehavior;
    get swipeExecuteBehavior(): com.telerik.widget.list.SwipeExecuteBehavior;
    get _childrenCount(): number;
    eachChildView(callback: (child: View) => boolean): void;
    _toggleSelectionColor(view: View, isSelected: boolean): void;
    _getViewLayoutParams(): org.nativescript.widgets.CommonLayoutParams;
    isItemSelected(item: any): boolean;
    selectAll(): void;
    deselectAll(): void;
    selectItemAt(index: number): void;
    deselectItemAt(index: number): void;
    getViewForItem(item: any): View;
    getSelectedItems(): any[];
    _getGroupTemplateBindingContext(): any;
    protected _getDefaultGroupContent(): View;
    protected onPullToRefreshStyleChanged(oldValue: listViewCommonModule.PullToRefreshStyle, newValue: listViewCommonModule.PullToRefreshStyle): void;
    protected onItemViewLoaderChanged(): void;
    protected onItemViewDisposerChanged(): void;
    protected onNativeScriptViewAddedChanged(): void;
    protected onHeaderItemTemplateChanged(oldValue: string, newValue: string): void;
    protected onFooterItemTemplateChanged(oldValue: string, newValue: string): void;
    protected onListViewLayoutChanged(oldValue: listViewCommonModule.ListViewLayoutBase, newValue: listViewCommonModule.ListViewLayoutBase): void;
    protected onItemTemplateSelectorChanged(oldValue: string | ((item: any, index: number, items: any) => string), newValue: string | ((item: any, index: number, items: any) => string)): void;
    protected onItemTemplateChanged(oldValue: string, newValue: string): void;
    protected onGroupTemplateChanged(oldValue: string, newValue: string): void;
    protected onItemTemplatesChanged(oldValue: string | Array<KeyedTemplate>, newValue: string | Array<KeyedTemplate>): void;
    protected itemSwipeTemplateChanged(oldValue: string, newValue: string): void;
    protected onMultipleSelectionChanged(oldValue: boolean, newValue: boolean): void;
    protected onItemReorderChanged(oldValue: boolean, newValue: boolean): void;
    protected onItemSwipeChanged(oldValue: boolean, newValue: boolean): void;
    protected onSwipeActionsChanged(oldValue: boolean, newValue: boolean): void;
    protected onPullToRefreshChanged(oldValue: boolean, newValue: boolean): void;
    protected onLoadOnDemandModeChanged(oldValue: listViewCommonModule.ListViewLoadOnDemandMode, newValue: listViewCommonModule.ListViewLoadOnDemandMode): void;
    protected onLoadOnDemandBufferSizeChanged(oldValue: number, newValue: number): void;
    protected onSelectionBehaviorChanged(oldValue: listViewCommonModule.ListViewSelectionBehavior, newValue: listViewCommonModule.ListViewSelectionBehavior): void;
    protected onLoadOnDemandItemTemplateChanged(oldValue: string, newValue: string): void;
    protected onSourceCollectionChanged(data: any): void;
    protected onEnableCollapsibleGroupsChanged(oldValue: boolean, newValue: boolean): void;
    protected onItemSelectedBackgroundColorChanged(oldValue: Color, newValue: Color): void;
    protected onGroupingFunctionChanged(oldValue: (item: any) => any, newValue: (item: any) => any): void;
    protected onFilteringFunctionChanged(oldValue: (item: any) => boolean, newValue: (item: any) => boolean): void;
    protected onSortingFunctionChanged(oldValue: (item: any, otherItem: any) => number, newValue: (item: any, otherItem: any) => number): void;
    private subscribeForNativeScrollEvents;
    private bindingContextChanged;
    refresh(): void;
    private forceRefreshLayout;
    protected clearEmbeddedViews(): void;
    private recreateEmbeddedViews;
    notifyPullToRefreshFinished(enableLoadOnDemand?: boolean): void;
    notifyLoadOnDemandFinished(disableLoadOnDemand?: boolean): void;
    notifyAppendItemsOnDemandFinished(_itemsCount: number, disableLoadOnDemand?: boolean): void;
    notifySwipeToExecuteFinished(): void;
    private retrieveNativeSnapMode;
    scrollToIndex(index: number, animate?: boolean, snapMode?: listViewCommonModule.ListViewItemSnapMode): void;
    getScrollOffset(): number;
    onScrolledPixelsChangedBy(by: number): void;
    private _isScrolled;
    scrollWithAmount(amount: number, animate: boolean): void;
    disposeViewHolderViews(views: Array<View>): void;
    _updateHeader(): void;
    _updateFooter(): void;
    private updateSwipeActionsBehavior;
    private updateSwipeToExecuteBehavior;
    private updatePullToRefreshBehavior;
    private updateCollapsibleGroupsBehavior;
    private setLoadOnDemandModeInternal;
    private updateLoadOnDemandBehavior;
    private updateReorderBehavior;
    private updateSelectionBehavior;
    private clearFilterDescriptors;
    private clearGroupDescriptors;
    private clearSortDescriptors;
    private loadData;
    private hardResetAdapter;
    private resetAdapter;
    private _disableLoadOnDemand;
    private _returnLoadOnDemandMode;
    _getOriginalIndex(inputIndex: number): any;
    private _getNativePosition;
    getFirstVisiblePosition(): any;
}
export declare class AndroidLVLayoutBase extends listViewCommonModule.ListViewLayoutBase {
    protected _android: androidx.recyclerview.widget.RecyclerView.LayoutManager;
    owner: WeakRef<RadListView>;
    get android(): any;
    _init(owner: WeakRef<RadListView>): void;
    _reset(): void;
    _onOwnerUICreated(): void;
    reset(): void;
    protected getLayoutManager(): any;
    protected onScrollDirectionChanged(oldValue: listViewCommonModule.ListViewScrollDirection, newValue: listViewCommonModule.ListViewScrollDirection): void;
    protected onItemInsertAnimationChanged(oldValue: listViewCommonModule.ListViewItemAnimation, newValue: listViewCommonModule.ListViewItemAnimation): void;
    protected onItemDeleteAnimationChanged(oldValue: listViewCommonModule.ListViewItemAnimation, newValue: listViewCommonModule.ListViewItemAnimation): void;
    private setLayoutOrientation;
    private updateItemAnimator;
    forceRefreshLayout(): void;
}
export declare class ListViewLinearLayout extends AndroidLVLayoutBase {
    constructor();
    protected getLayoutManager(): androidx.recyclerview.widget.LinearLayoutManager;
}
export declare class ListViewGridLayout extends ListViewLinearLayout {
    spanCount: number;
    constructor();
    static spanCountProperty: Property<ListViewGridLayout, number>;
    private onSpanCountPropertyChanged;
    protected onSpanCountChanged(oldValue: number, newValue: number): void;
    protected onItemHeightChanged(oldValue: number, newValue: number): void;
    protected onItemWidthChanged(oldValue: number, newValue: number): void;
    protected getLayoutManager(): androidx.recyclerview.widget.GridLayoutManager;
}
export declare class ListViewStaggeredLayout extends ListViewGridLayout {
    protected getLayoutManager(): any;
    forceRefreshLayout(): void;
}
