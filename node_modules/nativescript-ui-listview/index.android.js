export * from './common';
import { ChangeType, StackLayout, Property, Color, Label, Utils, Builder } from '@nativescript/core';
import * as listViewCommonModule from './common';
Builder.knownTemplates.add('itemTemplate').add('itemSwipeTemplate').add('loadOnDemandItemTemplate').add('headerItemTemplate').add('footerItemTemplate').add('groupTemplate');
Builder.knownMultiTemplates.add('itemTemplates');
const viewIsRecycled = Symbol('viewIsRecycled');
export class ReorderHandle extends listViewCommonModule.ReorderHandle {
    constructor() {
        super();
    }
}
// This handles Vue related `patchTemplate` mechanism as it needs to be called after onCreateViewHolder has been called.
function patchHolderViewIfChanged(holder, view) {
    if (view !== holder['nsView']._subViews[0]) {
        // the view has been changed on the event handler
        holder['nsView'].removeChildren();
        holder['nsView'].addChild(view);
        view['nsMainBackgroundColor'] = view.backgroundColor;
    }
}
let ExtendedReorderWithHandlesBehaviorClass;
function ensureExtendedReorderWithHandlesBehavior() {
    if (ExtendedReorderWithHandlesBehaviorClass) {
        return;
    }
    var ExtendedReorderWithHandlesBehavior = /** @class */ (function (_super) {
    __extends(ExtendedReorderWithHandlesBehavior, _super);
    function ExtendedReorderWithHandlesBehavior(viewId) {
        var _this = _super.call(this, viewId) || this;
        return global.__native(_this);
    }
    ExtendedReorderWithHandlesBehavior.prototype.getReorderHandleOverride = function (itemView) {
        var originalItemIndex = this.owner().getChildAdapterPosition(itemView);
        var nsOwner = this.nsOwner && this.nsOwner.get();
        var reorderHandle = undefined;
        if (nsOwner) {
            var nsViewForItem = nsOwner._listViewAdapter.getViewForItem(nsOwner.getItemAtIndex(originalItemIndex));
            nsViewForItem.eachChildView(function (view) {
                if (view instanceof ReorderHandle) {
                    reorderHandle = view;
                    return false;
                }
                return true;
            });
        }
        return reorderHandle === undefined ? itemView : reorderHandle.nativeViewProtected;
    };
    return ExtendedReorderWithHandlesBehavior;
}(com.telerik.widget.list.ReorderWithHandlesBehavior));
    ExtendedReorderWithHandlesBehaviorClass = ExtendedReorderWithHandlesBehavior;
}
let ListViewAdapterClass;
function ensureListViewAdapter() {
    if (ListViewAdapterClass) {
        return;
    }
    var ListViewAdapter = /** @class */ (function (_super) {
    __extends(ListViewAdapter, _super);
    function ListViewAdapter(items, owner) {
        var _this = _super.call(this, items) || this;
        _this.owner = owner;
        _this.templateTypeNumberString = new Map();
        _this._currentNativeItemType = 0;
        return global.__native(_this);
    }
    Object.defineProperty(ListViewAdapter.prototype, "_viewHolders", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this.owner) === null || _a === void 0 ? void 0 : _a.get()) === null || _b === void 0 ? void 0 : _b._viewHolders;
        },
        set: function (v) {
            var _a;
            if ((_a = this.owner) === null || _a === void 0 ? void 0 : _a.get()) {
                this.owner.get()._viewHolders = v;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListViewAdapter.prototype, "_swipeHolders", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this.owner) === null || _a === void 0 ? void 0 : _a.get()) === null || _b === void 0 ? void 0 : _b._swipeHolders;
        },
        set: function (v) {
            var _a;
            if ((_a = this.owner) === null || _a === void 0 ? void 0 : _a.get()) {
                this.owner.get()._swipeHolders = v;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListViewAdapter.prototype, "_viewHolderChildren", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this.owner) === null || _a === void 0 ? void 0 : _a.get()) === null || _b === void 0 ? void 0 : _b._viewHolderChildren;
        },
        set: function (v) {
            var _a;
            if ((_a = this.owner) === null || _a === void 0 ? void 0 : _a.get()) {
                this.owner.get()._viewHolderChildren = v;
            }
        },
        enumerable: true,
        configurable: true
    });
    ListViewAdapter.prototype.disposeViewHolderViews = function () {
        var _this = this;
        this._viewHolderChildren.forEach(function (element) {
            if (!element.parent) {
                // TODO: investigate why this can happen
                return;
            }
            if (!(element.parent instanceof RadListView) && _this.owner) {
                var owner = _this.owner.get();
                if (owner) {
                    owner._removeView(element.parent);
                }
            }
            element.parent._removeView(element);
        });
        this._viewHolderChildren = new Array();
        this._viewHolders = null;
        this._swipeHolders = null;
    };
    ListViewAdapter.prototype.getKeyByValue = function (inputValue) {
        var _a;
        var owner = (_a = this.owner) === null || _a === void 0 ? void 0 : _a.get();
        if (!owner) {
            return '';
        }
        return owner.nativeItemToTemplateKey(inputValue);
    };
    ListViewAdapter.prototype.clearTemplateTypes = function () {
        this._currentNativeItemType = 0;
        this.templateTypeNumberString.clear();
    };
    ListViewAdapter.prototype.onCreateViewHolder = function (parent, viewType) {
        var templateType = this.getKeyByValue(viewType);
        var owner = this.owner && this.owner.get();
        if (!owner) {
            return new com.telerik.widget.list.ListViewHolder(new android.view.View(parent.getContext()));
        }
        var view = owner.getViewForViewType(listViewCommonModule.ListViewViewType.ItemView, templateType);
        var parentView = new StackLayout();
        parentView.addChild(view);
        if (owner.nativeScriptViewAdded) {
            owner.nativeScriptViewAdded(parentView, view);
            parentView[listViewCommonModule.NG_VIEW] = view[listViewCommonModule.NG_VIEW];
        }
        this._viewHolderChildren.push(parentView);
        owner._addView(parentView);
        var layoutParams = owner._getViewLayoutParams();
        parentView.nativeView.setLayoutParams(layoutParams);
        var holder = new com.telerik.widget.list.ListViewHolder(parentView.nativeView);
        holder['nsView'] = parentView;
        view['nsMainBackgroundColor'] = view.backgroundColor;
        this._viewHolders.push(holder);
        return holder;
    };
    ListViewAdapter.prototype.getItemViewType = function (position) {
        var resultType = 0;
        var owner = this.owner && this.owner.get();
        if (owner && owner.itemTemplateSelector) {
            var selector = owner.itemTemplateSelector;
            if (selector) {
                var selectorType = selector(owner.getItemAtIndex(position), position, owner.items);
                resultType = owner.templateKeyToNativeItem(selectorType);
            }
        }
        return resultType;
    };
    ListViewAdapter.prototype.onBindViewHolder = function (holder, position) {
        var owner = this.owner && this.owner.get();
        if (!owner) {
            return;
        }
        var view = holder['nsView']._subViews[0];
        owner._toggleSelectionColor(view, owner.isItemSelected(owner.getItemAtIndex(position)));
        holder['nsView'].bindingContext = owner.getItemAtIndex(position);
        holder[viewIsRecycled] = false;
        var internalLoadingArgs = {
            eventName: listViewCommonModule.RadListView.itemLoadingInternalEvent,
            index: position,
            object: owner,
            view: view,
            android: holder,
        };
        owner.notify(internalLoadingArgs);
        patchHolderViewIfChanged(holder, internalLoadingArgs.view);
        var args = {
            eventName: listViewCommonModule.RadListView.itemLoadingEvent,
            index: position,
            object: owner,
            view: internalLoadingArgs.view,
            android: holder,
        };
        owner.notify(args);
        patchHolderViewIfChanged(holder, args.view);
    };
    ListViewAdapter.prototype.onCreateSwipeContentHolder = function (parent) {
        var owner = this.owner && this.owner.get();
        if (!owner) {
            return null;
        }
        var swipeView = owner.getViewForViewType(listViewCommonModule.ListViewViewType.ItemSwipeView);
        this._viewHolderChildren.push(swipeView);
        owner._addView(swipeView);
        var holder = new com.telerik.widget.list.ListViewHolder(swipeView.nativeView);
        holder['nsView'] = swipeView;
        this._swipeHolders.push(holder);
        return holder;
    };
    ListViewAdapter.prototype.onBindSwipeContentHolder = function (holder, position) {
        var owner = this.owner && this.owner.get();
        if (owner) {
            holder['nsView'].bindingContext = owner.getItemAtIndex(position);
            holder[viewIsRecycled] = false;
        }
    };
    ListViewAdapter.prototype.canReorder = function (itemIndex) {
        _super.prototype.canReorder.call(this, itemIndex);
        var owner = this.owner && this.owner.get();
        if (!owner) {
            return false;
        }
        var view = owner.getViewForItem(owner.getItemAtIndex(itemIndex));
        var args = {
            eventName: listViewCommonModule.RadListView.itemReorderStartingEvent,
            object: owner,
            index: itemIndex,
            groupIndex: -1,
            data: undefined,
            returnValue: true,
            view: view,
        };
        owner.notify(args);
        return args.returnValue;
    };
    ListViewAdapter.prototype.reorderItem = function (oldPosition, newPosition) {
        var result = _super.prototype.reorderItem.call(this, oldPosition, newPosition);
        if (result === true) {
            var owner = this.owner && this.owner.get();
            if (owner) {
                owner._reorderItemInSource(oldPosition, newPosition);
            }
        }
        return result;
    };
    ListViewAdapter.prototype.setItems = function (items) {
        // this.clearHolders();
        var owner = this.owner && this.owner.get();
        if (owner) {
            owner._resetCurrentId();
        }
        _super.prototype.setItems.call(this, items);
    };
    ListViewAdapter.prototype.canSwipe = function (position) {
        if (!_super.prototype.canSwipe.call(this, position)) {
            return false;
        }
        var owner = this.owner && this.owner.get();
        if (!owner) {
            return false;
        }
        var originalPosition = owner._getOriginalIndex(position);
        var args = {
            eventName: listViewCommonModule.RadListView.itemSwipingEvent,
            object: owner,
            index: originalPosition,
            groupIndex: -1,
            returnValue: true,
        };
        owner.notify(args);
        return args.returnValue;
    };
    ListViewAdapter.prototype.canSelect = function (position) {
        var canSelect = true;
        var owner = this.owner && this.owner.get();
        if (owner && owner.items) {
            var dataItem = owner.getItemAtIndex(position);
            var isSelected = owner.isItemSelected(dataItem);
            var currentEventName = isSelected === true ? listViewCommonModule.RadListView.itemDeselectingEvent : listViewCommonModule.RadListView.itemSelectingEvent;
            var view = owner.getViewForItem(dataItem);
            var args = {
                eventName: currentEventName,
                object: owner,
                index: position,
                groupIndex: -1,
                returnValue: true,
                view: view,
            };
            owner.notify(args);
            canSelect = args.returnValue === true;
        }
        return canSelect;
    };
    ListViewAdapter.prototype.getViewForItem = function (item) {
        for (var i = 0; i < this._viewHolders.length; i++) {
            if (!this._viewHolders[i][viewIsRecycled] && this._viewHolders[i]['nsView'] && this._viewHolders[i]['nsView'].bindingContext === item) {
                return this._viewHolders[i]['nsView'].getChildAt(0);
            }
        }
        return undefined;
    };
    ListViewAdapter.prototype.getSwipeViewForItem = function (item) {
        for (var i = 0; i < this._swipeHolders.length; i++) {
            if (!this._viewHolders[i][viewIsRecycled] && this._swipeHolders[i]['nsView'] && this._swipeHolders[i]['nsView'].bindingContext === item) {
                return this._swipeHolders[i]['nsView'];
            }
        }
        return undefined;
    };
    ListViewAdapter.prototype.clearHolders = function () {
        // this is now handled by the owner
        // this._viewHolders.splice(0, this._viewHolders.length);
        // this._swipeHolders.splice(0, this._swipeHolders.length);
    };
    return ListViewAdapter;
}(com.telerik.widget.list.ListViewAdapter));
    ListViewAdapterClass = ListViewAdapter;
}
let ListViewDataSourceAdapterClass;
function ensureListViewDataSourceAdapter() {
    if (ListViewDataSourceAdapterClass) {
        return;
    }
    var ListViewDataSourceAdapter = /** @class */ (function (_super) {
    __extends(ListViewDataSourceAdapter, _super);
    function ListViewDataSourceAdapter(items, owner) {
        var _this = _super.call(this, items) || this;
        _this.owner = owner;
        _this.templateTypeNumberString = new Map();
        _this._currentNativeItemType = 0;
        return global.__native(_this);
    }
    Object.defineProperty(ListViewDataSourceAdapter.prototype, "_viewHolders", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this.owner) === null || _a === void 0 ? void 0 : _a.get()) === null || _b === void 0 ? void 0 : _b._viewHolders;
        },
        set: function (v) {
            var _a;
            if ((_a = this.owner) === null || _a === void 0 ? void 0 : _a.get()) {
                this.owner.get()._viewHolders = v;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListViewDataSourceAdapter.prototype, "_swipeHolders", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this.owner) === null || _a === void 0 ? void 0 : _a.get()) === null || _b === void 0 ? void 0 : _b._swipeHolders;
        },
        set: function (v) {
            var _a;
            if ((_a = this.owner) === null || _a === void 0 ? void 0 : _a.get()) {
                this.owner.get()._swipeHolders = v;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListViewDataSourceAdapter.prototype, "_viewHolderChildren", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this.owner) === null || _a === void 0 ? void 0 : _a.get()) === null || _b === void 0 ? void 0 : _b._viewHolderChildren;
        },
        set: function (v) {
            var _a;
            if ((_a = this.owner) === null || _a === void 0 ? void 0 : _a.get()) {
                this.owner.get()._viewHolderChildren = v;
            }
        },
        enumerable: true,
        configurable: true
    });
    ListViewDataSourceAdapter.prototype.disposeViewHolderViews = function () {
        var _this = this;
        this._viewHolderChildren.forEach(function (element) {
            if (element.parent) {
                if (!(element.parent instanceof RadListView)) {
                    var owner = _this.owner && _this.owner.get();
                    if (owner) {
                        owner._removeView(element.parent);
                    }
                }
                element.parent._removeView(element);
            }
        });
        this._viewHolderChildren = new Array();
        this._viewHolders = null;
        this._swipeHolders = null;
    };
    ListViewDataSourceAdapter.prototype.getKeyByValue = function (inputValue) {
        var _a;
        var owner = (_a = this.owner) === null || _a === void 0 ? void 0 : _a.get();
        if (!owner) {
            return '';
        }
        return owner.nativeItemToTemplateKey(inputValue);
    };
    ListViewDataSourceAdapter.prototype.clearTemplateTypes = function () {
        this._currentNativeItemType = 0;
        this.templateTypeNumberString.clear();
    };
    ListViewDataSourceAdapter.prototype.onCreateGroupViewHolder = function (parent, viewType) {
        var owner = this.owner && this.owner.get();
        if (!owner) {
            return null;
        }
        if (owner.enableCollapsibleGroups) {
            return _super.prototype.onCreateGroupViewHolder.call(this, parent, viewType);
        }
        var nsGroupView = owner.getViewForViewType(listViewCommonModule.ListViewViewType.GroupView);
        if (!nsGroupView) {
            return _super.prototype.onCreateGroupViewHolder.call(this, parent, viewType);
        }
        var parentView = new StackLayout();
        parentView.addChild(nsGroupView);
        if (owner.nativeScriptViewAdded) {
            owner.nativeScriptViewAdded(parentView, nsGroupView);
            parentView[listViewCommonModule.NG_VIEW] = nsGroupView[listViewCommonModule.NG_VIEW];
        }
        var layoutParams = owner._getViewLayoutParams();
        this._viewHolderChildren.push(parentView);
        owner._addView(parentView);
        parentView.nativeView.setLayoutParams(layoutParams);
        var holder = new com.telerik.widget.list.ListViewHolder(parentView.android);
        holder['nsView'] = parentView;
        this._viewHolders.push(holder);
        return holder;
    };
    ListViewDataSourceAdapter.prototype.onBindGroupViewHolder = function (holder, groupKey) {
        var owner = this.owner && this.owner.get();
        if (!owner) {
            return;
        }
        if (owner.enableCollapsibleGroups || !holder['nsView']) {
            _super.prototype.onBindGroupViewHolder.call(this, holder, groupKey);
        }
        else {
            var value = { category: groupKey };
            holder['nsView'].bindingContext = value;
            holder[viewIsRecycled] = false;
            var internalLoadingArgs = {
                eventName: listViewCommonModule.RadListView.itemLoadingInternalEvent,
                index: -1,
                object: owner,
                view: holder['nsView']._subViews[0],
                android: holder,
            };
            owner.notify(internalLoadingArgs);
            patchHolderViewIfChanged(holder, internalLoadingArgs.view);
            var args = {
                eventName: listViewCommonModule.RadListView.itemLoadingEvent,
                index: -1,
                object: owner,
                view: internalLoadingArgs.view,
                android: holder,
            };
            owner.notify(args);
            patchHolderViewIfChanged(holder, args.view);
        }
    };
    ListViewDataSourceAdapter.prototype.onCreateItemViewHolder = function (parent, viewType) {
        var owner = this.owner && this.owner.get();
        if (!owner) {
            return null;
        }
        var templateType = this.getKeyByValue(viewType);
        var view = owner.getViewForViewType(listViewCommonModule.ListViewViewType.ItemView, templateType);
        var parentView = new StackLayout();
        parentView.addChild(view);
        if (owner.nativeScriptViewAdded) {
            owner.nativeScriptViewAdded(parentView, view);
            parentView[listViewCommonModule.NG_VIEW] = view[listViewCommonModule.NG_VIEW];
        }
        this._viewHolderChildren.push(parentView);
        owner._addView(parentView);
        var layoutParams = owner._getViewLayoutParams();
        parentView.nativeView.setLayoutParams(layoutParams);
        var holder = new com.telerik.widget.list.ListViewHolder(parentView.android);
        holder['nsView'] = parentView;
        this._viewHolders.push(holder);
        return holder;
    };
    ListViewDataSourceAdapter.prototype.isGroupHeader = function (position) {
        return _super.prototype.isGroupHeader.call(this, position);
    };
    ListViewDataSourceAdapter.prototype.getItemViewType = function (position) {
        var owner = this.owner && this.owner.get();
        var resultType = 0;
        if (_super.prototype.isGroupHeader.call(this, position)) {
            resultType = _super.prototype.getItemViewType.call(this, position);
        }
        else {
            if (owner && owner.itemTemplateSelector) {
                var selector = owner.itemTemplateSelector;
                if (selector) {
                    var nativeIndex = _super.prototype.getItemId.call(this, position);
                    var dataItem = owner.getItemAtIndex(nativeIndex);
                    if (dataItem) {
                        var selectorType = selector(dataItem, nativeIndex, owner.items);
                        if (!this.templateTypeNumberString.has(selectorType)) {
                            this.templateTypeNumberString.set(selectorType, this._currentNativeItemType);
                            this._currentNativeItemType++;
                        }
                        resultType = owner.templateKeyToNativeItem(selectorType);
                    }
                }
            }
        }
        return resultType;
    };
    ListViewDataSourceAdapter.prototype.onBindItemViewHolder = function (holder, nativeItem) {
        var owner = this.owner && this.owner.get();
        if (!owner) {
            return;
        }
        var index = this.getItems().indexOf(new java.lang.Integer(nativeItem));
        var item = owner.getItemAtIndex(index);
        holder['nsView'].bindingContext = item;
        holder[viewIsRecycled] = false;
        var internalLoadingArgs = {
            eventName: listViewCommonModule.RadListView.itemLoadingInternalEvent,
            index: index,
            object: owner,
            view: holder['nsView']._subViews[0],
            android: holder,
        };
        owner.notify(internalLoadingArgs);
        patchHolderViewIfChanged(holder, internalLoadingArgs.view);
        var args = {
            eventName: listViewCommonModule.RadListView.itemLoadingEvent,
            index: index,
            object: owner,
            view: internalLoadingArgs.view,
            android: holder,
        };
        owner.notify(args);
        patchHolderViewIfChanged(holder, args.view);
    };
    ListViewDataSourceAdapter.prototype.onCreateSwipeContentHolder = function (parent) {
        var owner = this.owner && this.owner.get();
        if (!owner) {
            return null;
        }
        var swipeView = owner.getViewForViewType(listViewCommonModule.ListViewViewType.ItemSwipeView);
        this._viewHolderChildren.push(swipeView);
        owner._addView(swipeView);
        var holder = new com.telerik.widget.list.ListViewHolder(swipeView.android);
        holder['nsView'] = swipeView;
        this._swipeHolders.push(holder);
        return holder;
    };
    ListViewDataSourceAdapter.prototype.onBindSwipeItemViewHolder = function (holder, nativeItem) {
        var owner = this.owner && this.owner.get();
        if (owner) {
            var index = this.getItems().indexOf(new java.lang.Integer(nativeItem));
            var item = owner.getItemAtIndex(index);
            holder['nsView'].bindingContext = item;
            holder[viewIsRecycled] = false;
        }
    };
    ListViewDataSourceAdapter.prototype.reorderItem = function (oldPosition, newPosition) {
        var result = _super.prototype.reorderItem.call(this, oldPosition, newPosition);
        if (result === true) {
            var owner = this.owner && this.owner.get();
            if (owner) {
                owner._reorderItemInSource(oldPosition, newPosition);
            }
        }
        return result;
    };
    ListViewDataSourceAdapter.prototype.setItems = function (items) {
        // this.clearHolders();
        var owner = this.owner && this.owner.get();
        if (owner) {
            owner._resetCurrentId();
        }
        _super.prototype.setItems.call(this, items);
    };
    ListViewDataSourceAdapter.prototype.canSwipe = function (position) {
        var owner = this.owner && this.owner.get();
        if (!owner || !_super.prototype.canSwipe.call(this, position)) {
            return false;
        }
        var originalPosition = owner._getOriginalIndex(position);
        var args = {
            eventName: listViewCommonModule.RadListView.itemSwipingEvent,
            object: owner,
            index: originalPosition,
            groupIndex: -1,
            returnValue: true,
        };
        owner.notify(args);
        return args.returnValue;
    };
    ListViewDataSourceAdapter.prototype.canSelect = function (position) {
        var owner = this.owner && this.owner.get();
        if (owner && owner.items) {
            var isSelected = owner.isItemSelected(owner.getItemAtIndex(position));
            var currentEventName = isSelected === true ? listViewCommonModule.RadListView.itemDeselectingEvent : listViewCommonModule.RadListView.itemSelectingEvent;
            var args = {
                eventName: currentEventName,
                object: owner,
                index: position,
                groupIndex: -1,
                returnValue: true,
            };
            owner.notify(args);
        }
        return true;
    };
    ListViewDataSourceAdapter.prototype.getViewForItem = function (item) {
        for (var i = 0; i < this._viewHolders.length; i++) {
            if (!this._viewHolders[i][viewIsRecycled] && this._viewHolders[i]['nsView'] && this._viewHolders[i]['nsView'].bindingContext === item) {
                return this._viewHolders[i]['nsView'].getChildAt(0);
            }
        }
        return undefined;
    };
    ListViewDataSourceAdapter.prototype.getSwipeViewForItem = function (item) {
        for (var i = 0; i < this._swipeHolders.length; i++) {
            if (!this._viewHolders[i][viewIsRecycled] && this._swipeHolders[i]['nsView'] && this._swipeHolders[i]['nsView'].bindingContext === item) {
                return this._swipeHolders[i]['nsView'];
            }
        }
        return undefined;
    };
    ListViewDataSourceAdapter.prototype.clearHolders = function () {
        // this is now handled by the owner
        // this._viewHolders.splice(0, this._viewHolders.length);
        // this._swipeHolders.splice(0, this._swipeHolders.length);
    };
    return ListViewDataSourceAdapter;
}(com.telerik.widget.list.ListViewDataSourceAdapter));
    ListViewDataSourceAdapterClass = ListViewDataSourceAdapter;
}
let ListViewItemClickListener;
let ListViewSwipeActionsListener;
let ListViewSwipeExecuteListener;
let ListViewSwipeRefreshListener;
let ListViewLoadOnDemandListener;
let ListViewItemReorderListener;
let ListViewSelectionChangedListener;
let ListViewNativeScrollListener;
function initializeListeners() {
    if (!ListViewItemClickListener) {
        var ListViewItemClickListenerImpl = /** @class */ (function (_super) {
    __extends(ListViewItemClickListenerImpl, _super);
    function ListViewItemClickListenerImpl(owner) {
        var _this = _super.call(this) || this;
        _this.owner = owner;
        return global.__native(_this);
    }
    ListViewItemClickListenerImpl.prototype.onItemClick = function (itemPosition, motionEvent) {
        var listView = this.owner && this.owner.get();
        if (!listView || itemPosition < 0) {
            return;
        }
        var isGroupHeader = listView._listViewAdapter.isGroupHeader(itemPosition);
        if (!isGroupHeader) {
            var originalPosition = listView._getOriginalIndex(itemPosition);
            var tappedView = listView._listViewAdapter.getViewForItem(listView.getItemAtIndex(originalPosition));
            var args = {
                android: motionEvent,
                eventName: listViewCommonModule.RadListView.itemTapEvent,
                object: listView,
                view: tappedView,
                index: originalPosition,
                groupIndex: -1,
            };
            listView.notify(args);
        }
    };
    ListViewItemClickListenerImpl.prototype.onItemLongClick = function (itemPosition, motionEvent) {
        var listView = this.owner && this.owner.get();
        if (!listView || itemPosition < 0) {
            return;
        }
        var isGroupHeader = listView._listViewAdapter.isGroupHeader(itemPosition);
        if (!isGroupHeader) {
            var originalPosition = listView._getOriginalIndex(itemPosition);
            var tappedView = listView._listViewAdapter.getViewForItem(listView.getItemAtIndex(originalPosition));
            var args = {
                android: motionEvent,
                eventName: listViewCommonModule.RadListView.itemHoldEvent,
                object: listView,
                view: tappedView,
                index: originalPosition,
                groupIndex: -1,
            };
            listView.notify(args);
        }
    };
    ListViewItemClickListenerImpl = __decorate([
        Interfaces([com.telerik.widget.list.RadListView.ItemClickListener])
    ], ListViewItemClickListenerImpl);
    return ListViewItemClickListenerImpl;
}(java.lang.Object));
        ListViewItemClickListener = ListViewItemClickListenerImpl;
    }
    if (!ListViewSwipeActionsListener) {
        var ListViewSwipeActionsListenerImpl = /** @class */ (function (_super) {
    __extends(ListViewSwipeActionsListenerImpl, _super);
    function ListViewSwipeActionsListenerImpl(owner) {
        var _this = _super.call(this) || this;
        _this.owner = owner;
        var ref = owner && owner.get();
        _this.swipeLimits = {
            left: ref ? ref.getMeasuredWidth() : 0,
            top: ref ? ref.getMeasuredHeight() : 0,
            right: ref ? ref.getMeasuredWidth() : 0,
            bottom: ref ? ref.getMeasuredHeight() : 0,
            threshold: 0,
        };
        return global.__native(_this);
    }
    ListViewSwipeActionsListenerImpl.prototype.onSwipeStarted = function (event) {
        var owner = this.owner && this.owner.get();
        if (!owner) {
            return;
        }
        var originalPosition = owner._getOriginalIndex(event.swipedItemPosition());
        var swipeView = owner._listViewAdapter.getSwipeViewForItem(owner.getItemAtIndex(originalPosition));
        var mainView = owner._listViewAdapter.getViewForItem(owner.getItemAtIndex(originalPosition));
        var args = {
            eventName: listViewCommonModule.RadListView.itemSwipeProgressStartedEvent,
            object: owner,
            swipeView: swipeView,
            mainView: mainView,
            index: originalPosition,
            data: { swipeLimits: this.swipeLimits },
        };
        owner.notify(args);
        if (owner.listViewLayout.scrollDirection === listViewCommonModule.ListViewScrollDirection.Horizontal) {
            if (this.swipeLimits.top >= 0) {
                owner.swipeActionsBehavior.setSwipeLimitStart(this.swipeLimits.top);
            }
            if (this.swipeLimits.bottom >= 0) {
                owner.swipeActionsBehavior.setSwipeLimitEnd(this.swipeLimits.bottom);
            }
        }
        else {
            if (this.swipeLimits.left >= 0) {
                owner.swipeActionsBehavior.setSwipeLimitStart(this.swipeLimits.left);
            }
            if (this.swipeLimits.right >= 0) {
                owner.swipeActionsBehavior.setSwipeLimitEnd(this.swipeLimits.right);
            }
        }
        if (this.swipeLimits.threshold !== undefined) {
            owner.swipeActionsBehavior.setSwipeThresholdEnd(this.swipeLimits.threshold);
            owner.swipeActionsBehavior.setSwipeThresholdStart(this.swipeLimits.threshold);
        }
    };
    ListViewSwipeActionsListenerImpl.prototype.onSwipeProgressChanged = function (event) {
        if (event.isRemoveInProgress()) {
            // If an item gets removed while being swiped, we no longer have it in the source
            // and are unable to determine its position.
            return;
        }
        var owner = this.owner && this.owner.get();
        if (!owner) {
            return;
        }
        var originalPosition = owner._getOriginalIndex(event.swipedItemPosition());
        var swipeView = owner._listViewAdapter.getSwipeViewForItem(owner.getItemAtIndex(originalPosition));
        var mainView = owner._listViewAdapter.getViewForItem(owner.getItemAtIndex(originalPosition));
        var args = {
            eventName: listViewCommonModule.RadListView.itemSwipeProgressChangedEvent,
            object: owner,
            swipeView: swipeView,
            mainView: mainView,
            index: originalPosition,
            data: {
                x: owner.listViewLayout.scrollDirection === listViewCommonModule.ListViewScrollDirection.Vertical ? event.currentOffset() : 0,
                y: owner.listViewLayout.scrollDirection === listViewCommonModule.ListViewScrollDirection.Vertical ? 0 : event.currentOffset(),
                swipeLimits: this.swipeLimits,
            },
        };
        owner.notify(args);
    };
    ListViewSwipeActionsListenerImpl.prototype.onSwipeEnded = function (event) { };
    ListViewSwipeActionsListenerImpl.prototype.onExecuteFinished = function (event) {
        if (event.isRemoveInProgress()) {
            // If an item gets removed while being swiped, we no longer have it in the source
            // and are unable to determine its position.
            return;
        }
        var owner = this.owner && this.owner.get();
        if (!owner) {
            return;
        }
        var originalPosition = owner._getOriginalIndex(event.swipedItemPosition());
        var swipeView = owner._listViewAdapter.getSwipeViewForItem(owner.getItemAtIndex(originalPosition));
        var mainView = owner._listViewAdapter.getViewForItem(owner.getItemAtIndex(originalPosition));
        var args = {
            eventName: listViewCommonModule.RadListView.itemSwipeProgressEndedEvent,
            object: owner,
            swipeView: swipeView,
            mainView: mainView,
            index: originalPosition,
            data: {
                x: owner.listViewLayout.scrollDirection === listViewCommonModule.ListViewScrollDirection.Vertical ? event.swipePositionWhenReleased() : 0,
                y: owner.listViewLayout.scrollDirection === listViewCommonModule.ListViewScrollDirection.Vertical ? 0 : event.swipePositionWhenReleased(),
                swipeLimits: this.swipeLimits,
            },
        };
        owner.notify(args);
    };
    ListViewSwipeActionsListenerImpl.prototype.onSwipeStateChanged = function (oldState, newState) { };
    ListViewSwipeActionsListenerImpl = __decorate([
        Interfaces([com.telerik.widget.list.SwipeActionsBehavior.SwipeActionsListener])
    ], ListViewSwipeActionsListenerImpl);
    return ListViewSwipeActionsListenerImpl;
}(java.lang.Object));
        ListViewSwipeActionsListener = ListViewSwipeActionsListenerImpl;
    }
    if (!ListViewSwipeExecuteListener) {
        var ListViewSwipeExecuteListenerImpl = /** @class */ (function (_super) {
    __extends(ListViewSwipeExecuteListenerImpl, _super);
    function ListViewSwipeExecuteListenerImpl(owner) {
        var _this = _super.call(this) || this;
        _this.owner = owner;
        var ref = owner && owner.get();
        _this.swipeLimits = ref && ref.listViewLayout.scrollDirection === listViewCommonModule.ListViewScrollDirection.Vertical ? { left: 150, top: 0, right: 150, bottom: 0, threshold: 75 } : { left: 0, top: 150, right: 0, bottom: 150, threshold: 75 };
        return global.__native(_this);
    }
    ListViewSwipeExecuteListenerImpl.prototype.onSwipeStarted = function (position) {
        var listView = this.owner && this.owner.get();
        if (listView) {
            var args = {
                eventName: listViewCommonModule.RadListView.itemSwipeProgressStartedEvent,
                object: listView,
                swipeView: listView._listViewAdapter.getSwipeViewForItem(listView.getItemAtIndex(position)),
                index: position,
                groupIndex: -1,
                data: { swipeLimits: this.swipeLimits },
            };
            listView.notify(args);
            if (listView.listViewLayout.scrollDirection === listViewCommonModule.ListViewScrollDirection.Horizontal) {
                listView.swipeExecuteBehavior.setSwipeLimitStart(-this.swipeLimits.top);
                listView.swipeExecuteBehavior.setSwipeLimitEnd(this.swipeLimits.bottom);
            }
            else {
                listView.swipeExecuteBehavior.setSwipeLimitStart(-this.swipeLimits.right);
                listView.swipeExecuteBehavior.setSwipeLimitEnd(this.swipeLimits.left);
            }
        }
    };
    ListViewSwipeExecuteListenerImpl.prototype.onSwipeProgressChanged = function (position, currentOffset, swipeContent) {
        var listView = this.owner && this.owner.get();
        if (listView) {
            var args = {
                eventName: listViewCommonModule.RadListView.itemSwipeProgressChangedEvent,
                object: listView,
                swipeView: listView._listViewAdapter.getSwipeViewForItem(listView.getItemAtIndex(position)),
                index: position,
                data: { x: currentOffset, y: 0, swipeLimits: this.swipeLimits },
                returnValue: undefined,
            };
            listView.notify(args);
        }
    };
    ListViewSwipeExecuteListenerImpl.prototype.onSwipeEnded = function (position, finalOffset) {
        var listView = this.owner && this.owner.get();
        if (listView) {
            var args = {
                eventName: listViewCommonModule.RadListView.itemSwipeProgressEndedEvent,
                object: listView,
                swipeView: listView._listViewAdapter.getSwipeViewForItem(listView.getItemAtIndex(position)),
                index: position,
                data: { x: finalOffset, y: 0, swipeLimits: this.swipeLimits },
                returnValue: undefined,
            };
            listView.notify(args);
            if (args.data.swipeLimits) {
                if (Math.abs(finalOffset) > args.data.swipeLimits.threshold) {
                    if (finalOffset < 0) {
                        if (listView.listViewLayout.scrollDirection === listViewCommonModule.ListViewScrollDirection.Horizontal) {
                            listView.swipeExecuteBehavior.setSwipeOffset(-args.data.swipeLimits.bottom);
                        }
                        else if (listView.listViewLayout.scrollDirection === listViewCommonModule.ListViewScrollDirection.Vertical) {
                            listView.swipeExecuteBehavior.setSwipeOffset(-args.data.swipeLimits.right);
                        }
                    }
                    else if (finalOffset > 0) {
                        if (listView.listViewLayout.scrollDirection === listViewCommonModule.ListViewScrollDirection.Horizontal) {
                            listView.swipeExecuteBehavior.setSwipeOffset(args.data.swipeLimits.top);
                        }
                        else if (listView.listViewLayout.scrollDirection === listViewCommonModule.ListViewScrollDirection.Vertical) {
                            listView.swipeExecuteBehavior.setSwipeOffset(args.data.swipeLimits.left);
                        }
                    }
                }
                else {
                    listView.swipeExecuteBehavior.setSwipeOffset(0);
                }
            }
        }
    };
    ListViewSwipeExecuteListenerImpl.prototype.onExecuteFinished = function (position) { };
    ListViewSwipeExecuteListenerImpl = __decorate([
        Interfaces([com.telerik.widget.list.SwipeExecuteBehavior.SwipeExecuteListener])
    ], ListViewSwipeExecuteListenerImpl);
    return ListViewSwipeExecuteListenerImpl;
}(java.lang.Object));
        ListViewSwipeExecuteListener = ListViewSwipeExecuteListenerImpl;
    }
    if (!ListViewSwipeRefreshListener) {
        var ListViewSwipeRefreshListenerImpl = /** @class */ (function (_super) {
    __extends(ListViewSwipeRefreshListenerImpl, _super);
    function ListViewSwipeRefreshListenerImpl(owner) {
        var _this = _super.call(this) || this;
        _this.owner = owner;
        return global.__native(_this);
    }
    ListViewSwipeRefreshListenerImpl.prototype.onRefreshRequested = function () {
        var owner = this.owner && this.owner.get();
        if (owner) {
            var args = {
                eventName: listViewCommonModule.RadListView.pullToRefreshInitiatedEvent,
                object: owner,
                returnValue: true,
            };
            owner.notify(args);
        }
    };
    ListViewSwipeRefreshListenerImpl = __decorate([
        Interfaces([com.telerik.widget.list.SwipeRefreshBehavior.SwipeRefreshListener])
    ], ListViewSwipeRefreshListenerImpl);
    return ListViewSwipeRefreshListenerImpl;
}(java.lang.Object));
        ListViewSwipeRefreshListener = ListViewSwipeRefreshListenerImpl;
    }
    if (!ListViewLoadOnDemandListener) {
        var ListViewLoadOnDemandListenerImpl = /** @class */ (function (_super) {
    __extends(ListViewLoadOnDemandListenerImpl, _super);
    function ListViewLoadOnDemandListenerImpl(owner) {
        var _this = _super.call(this) || this;
        _this.owner = owner;
        return global.__native(_this);
    }
    ListViewLoadOnDemandListenerImpl.prototype.onLoadStarted = function () {
        var owner = this.owner && this.owner.get();
        if (owner) {
            var args = {
                eventName: listViewCommonModule.RadListView.loadMoreDataRequestedEvent,
                object: owner,
                returnValue: true,
            };
            owner.notify(args);
        }
    };
    ListViewLoadOnDemandListenerImpl.prototype.onLoadFinished = function () { };
    ListViewLoadOnDemandListenerImpl = __decorate([
        Interfaces([com.telerik.widget.list.LoadOnDemandBehavior.LoadOnDemandListener])
    ], ListViewLoadOnDemandListenerImpl);
    return ListViewLoadOnDemandListenerImpl;
}(java.lang.Object));
        ListViewLoadOnDemandListener = ListViewLoadOnDemandListenerImpl;
    }
    if (!ListViewItemReorderListener) {
        var ListViewItemReorderListenerImpl = /** @class */ (function (_super) {
    __extends(ListViewItemReorderListenerImpl, _super);
    function ListViewItemReorderListenerImpl(owner) {
        var _this = _super.call(this) || this;
        _this.owner = owner;
        _this.newIndex = -1;
        _this.oldIndex = -1;
        return global.__native(_this);
    }
    ListViewItemReorderListenerImpl.prototype.onReorderStarted = function (position) {
        var owner = this.owner && this.owner.get();
        this.oldIndex = position;
        if (owner) {
            var view = owner.getViewForItem(owner.getItemAtIndex(position));
            var args = {
                eventName: listViewCommonModule.RadListView.itemReorderStartedEvent,
                object: this.owner,
                index: this.oldIndex,
                groupIndex: -1,
                view: view,
            };
            owner.notify(args);
        }
    };
    ListViewItemReorderListenerImpl.prototype.onReorderItem = function (fromIndex, toIndex) {
        this.newIndex = toIndex;
    };
    ListViewItemReorderListenerImpl.prototype.onReorderFinished = function () {
        if (this.newIndex === -1) {
            this.newIndex = this.oldIndex;
        }
        var owner = this.owner && this.owner.get();
        if (owner) {
            var view = owner.getViewForItem(owner.getItemAtIndex(this.newIndex));
            var args = {
                eventName: listViewCommonModule.RadListView.itemReorderedEvent,
                object: this.owner,
                index: this.oldIndex,
                groupIndex: -1,
                data: { targetIndex: this.newIndex, targetGroupIndex: -1 },
                view: view,
            };
            this.newIndex = -1;
            owner.notify(args);
        }
    };
    ListViewItemReorderListenerImpl = __decorate([
        Interfaces([com.telerik.widget.list.ItemReorderBehavior.ItemReorderListener])
    ], ListViewItemReorderListenerImpl);
    return ListViewItemReorderListenerImpl;
}(java.lang.Object));
        ListViewItemReorderListener = ListViewItemReorderListenerImpl;
    }
    if (!ListViewSelectionChangedListener) {
        var ListViewSelectionChangedListenerImpl = /** @class */ (function (_super) {
    __extends(ListViewSelectionChangedListenerImpl, _super);
    function ListViewSelectionChangedListenerImpl(owner) {
        var _this = _super.call(this) || this;
        _this.owner = owner;
        return global.__native(_this);
    }
    ListViewSelectionChangedListenerImpl.prototype.onSelectionStarted = function () { };
    ListViewSelectionChangedListenerImpl.prototype.onItemIsSelectedChanged = function (position, newValue) {
        var currentEventName = newValue === true ? listViewCommonModule.RadListView.itemSelectedEvent : listViewCommonModule.RadListView.itemDeselectedEvent;
        var listView = this.owner && this.owner.get();
        if (!listView || position < 0) {
            return;
        }
        var isGroupHeader = listView._listViewAdapter.isGroupHeader(position);
        if (!isGroupHeader) {
            var originalPosition = listView._getOriginalIndex(position);
            var item = listView.getItemAtIndex(originalPosition);
            var view = listView.getViewForItem(item);
            listView._toggleSelectionColor(view, currentEventName === listViewCommonModule.RadListView.itemSelectedEvent);
            var args = {
                eventName: currentEventName,
                object: listView,
                index: originalPosition,
                groupIndex: -1,
                view: view,
            };
            listView.notify(args);
        }
    };
    ListViewSelectionChangedListenerImpl.prototype.onSelectionEnded = function () { };
    ListViewSelectionChangedListenerImpl = __decorate([
        Interfaces([com.telerik.widget.list.SelectionBehavior.SelectionChangedListener])
    ], ListViewSelectionChangedListenerImpl);
    return ListViewSelectionChangedListenerImpl;
}(java.lang.Object));
        ListViewSelectionChangedListener = ListViewSelectionChangedListenerImpl;
    }
    if (!ListViewNativeScrollListener) {
        var ListViewNativeScrollListenerImpl = /** @class */ (function (_super) {
    __extends(ListViewNativeScrollListenerImpl, _super);
    function ListViewNativeScrollListenerImpl(owner) {
        var _this = _super.call(this) || this;
        _this.owner = owner;
        _this._wasIdle = true;
        _this._wasDragging = false;
        return global.__native(_this);
    }
    ListViewNativeScrollListenerImpl.prototype.onScrolled = function (recyclerView, dx, dy) {
        var owner = this.owner && this.owner.get();
        if (owner) {
            owner.onScrolledPixelsChangedBy(dx + dy);
            var eventData = {
                eventName: listViewCommonModule.RadListView.scrolledEvent,
                object: owner,
                scrollOffset: owner.getScrollOffset(),
            };
            owner.notify(eventData);
        }
    };
    ListViewNativeScrollListenerImpl.prototype.onScrollStateChanged = function (param0, scrollState) {
        var owner = this.owner && this.owner.get();
        if (owner) {
            var eventData = void 0;
            switch (scrollState) {
                case androidx.recyclerview.widget.RecyclerView.SCROLL_STATE_IDLE:
                    if (this._wasDragging) {
                        eventData = {
                            eventName: listViewCommonModule.RadListView.scrollDragEndedEvent,
                            object: owner,
                            scrollOffset: owner.getScrollOffset(),
                        };
                        this._wasDragging = false;
                        if (owner.hasListeners(eventData.eventName)) {
                            owner.notify(eventData);
                        }
                    }
                    eventData = {
                        eventName: listViewCommonModule.RadListView.scrollEndedEvent,
                        object: owner,
                        scrollOffset: owner.getScrollOffset(),
                    };
                    this._wasIdle = true;
                    break;
                case androidx.recyclerview.widget.RecyclerView.SCROLL_STATE_DRAGGING:
                    this._wasDragging = true;
                    eventData = {
                        eventName: this._wasIdle ? listViewCommonModule.RadListView.scrollStartedEvent : listViewCommonModule.RadListView.scrolledEvent,
                        object: owner,
                        scrollOffset: owner.getScrollOffset(),
                    };
                    this._wasIdle = false;
                    break;
                case androidx.recyclerview.widget.RecyclerView.SCROLL_STATE_SETTLING:
                    if (this._wasDragging) {
                        eventData = {
                            eventName: listViewCommonModule.RadListView.scrollDragEndedEvent,
                            object: owner,
                            scrollOffset: owner.getScrollOffset(),
                        };
                        this._wasDragging = false;
                        if (owner.hasListeners(eventData.eventName)) {
                            owner.notify(eventData);
                        }
                    }
                    eventData = {
                        eventName: listViewCommonModule.RadListView.scrolledEvent,
                        object: owner,
                        scrollOffset: owner.getScrollOffset(),
                    };
                    break;
            }
            if (owner.hasListeners(eventData.eventName)) {
                owner.notify(eventData);
            }
        }
    };
    return ListViewNativeScrollListenerImpl;
}(androidx.recyclerview.widget.RecyclerView.OnScrollListener));
        ListViewNativeScrollListener = ListViewNativeScrollListenerImpl;
    }
}
let ListViewGroupDescriptor;
let ListViewFilterDescriptor;
let ListViewSortDescriptor;
function initializeDataFunctions() {
    if (!ListViewGroupDescriptor) {
        var ListViewGroupDescriptorImpl = /** @class */ (function (_super) {
    __extends(ListViewGroupDescriptorImpl, _super);
    function ListViewGroupDescriptorImpl(owner) {
        var _this = _super.call(this) || this;
        _this.owner = owner;
        return global.__native(_this);
    }
    ListViewGroupDescriptorImpl.prototype.groupForItem = function (nativeItem) {
        var owner = this.owner && this.owner.get();
        if (owner) {
            var index = owner._listViewAdapter.getItems().indexOf(new java.lang.Integer(+nativeItem));
            var item = owner.getItemAtIndex(index);
            return owner.groupingFunction(item);
        }
        return null;
    };
    ListViewGroupDescriptorImpl = __decorate([
        Interfaces([com.telerik.android.data.ListViewGroupFunction])
    ], ListViewGroupDescriptorImpl);
    return ListViewGroupDescriptorImpl;
}(java.lang.Object));
        ListViewGroupDescriptor = ListViewGroupDescriptorImpl;
    }
    if (!ListViewFilterDescriptor) {
        var ListViewFilterDescriptorImpl = /** @class */ (function (_super) {
    __extends(ListViewFilterDescriptorImpl, _super);
    function ListViewFilterDescriptorImpl(owner) {
        var _this = _super.call(this) || this;
        _this.owner = owner;
        return global.__native(_this);
    }
    ListViewFilterDescriptorImpl.prototype.shouldIncludeItem = function (nativeItem) {
        var owner = this.owner && this.owner.get();
        if (owner) {
            var index = owner._listViewAdapter.getItems().indexOf(new java.lang.Integer(+nativeItem));
            var item = owner.getItemAtIndex(index);
            return owner.filteringFunction(item);
        }
        return false;
    };
    ListViewFilterDescriptorImpl = __decorate([
        Interfaces([com.telerik.android.data.ListViewFilterFunction])
    ], ListViewFilterDescriptorImpl);
    return ListViewFilterDescriptorImpl;
}(java.lang.Object));
        ListViewFilterDescriptor = ListViewFilterDescriptorImpl;
    }
    if (!ListViewSortDescriptor) {
        var ListViewSortDescriptorImpl = /** @class */ (function (_super) {
    __extends(ListViewSortDescriptorImpl, _super);
    function ListViewSortDescriptorImpl(owner) {
        var _this = _super.call(this) || this;
        _this.owner = owner;
        return global.__native(_this);
    }
    ListViewSortDescriptorImpl.prototype.compareItems = function (nativeItem1, nativeItem2) {
        var owner = this.owner && this.owner.get();
        if (owner) {
            var nativeIndex1 = owner._listViewAdapter.getItems().indexOf(new java.lang.Integer(+nativeItem1));
            var nativeIndex2 = owner._listViewAdapter.getItems().indexOf(new java.lang.Integer(+nativeItem2));
            var item1 = owner.getItemAtIndex(nativeIndex1);
            var item2 = owner.getItemAtIndex(nativeIndex2);
            var javaRes = owner.sortingFunction(item2, item1);
            return new java.lang.Integer(javaRes);
        }
        return java.lang.Integer.valueOf(-1);
    };
    ListViewSortDescriptorImpl = __decorate([
        Interfaces([com.telerik.android.data.ListViewSortFunction])
    ], ListViewSortDescriptorImpl);
    return ListViewSortDescriptorImpl;
}(java.lang.Object));
        ListViewSortDescriptor = ListViewSortDescriptorImpl;
    }
}
export class RadListView extends listViewCommonModule.RadListView {
    constructor() {
        super();
        this._currentId = 0;
        this._androidViewId = -1;
        this._scrolledPixels = 0;
        this._viewHolders = [];
        this._swipeHolders = [];
        this._viewHolderChildren = [];
        this.desiredPoolSize = new Map();
        this._currentNativeItemType = 100;
        this.defaultPoolSize = 100;
        ensureListViewAdapter();
        ensureListViewDataSourceAdapter();
        initializeListeners();
        initializeDataFunctions();
        this.on('bindingContextChange', this.bindingContextChanged, this);
        this._headerViewHolderChildren = new Array();
        this._footerViewHolderChildren = new Array();
        this._loadOnDemandViewHolderChildren = new Array();
    }
    createNativeView() {
        this._android = new com.telerik.widget.list.RadListView(this._context);
        this.setupRecycler();
        this._rootLayout = new android.widget.FrameLayout(this._context);
        this._rootLayout.addView(this._android);
        if (this.listViewLayout) {
            this.listViewLayout._init(new WeakRef(this));
        }
        else {
            this.listViewLayout = new ListViewLinearLayout();
        }
        this.loadData();
        this.subscribeForNativeScrollEvents();
        this.updateSelectionBehavior();
        this.updateReorderBehavior();
        this.updateLoadOnDemandBehavior();
        this.updatePullToRefreshBehavior();
        this.updateSwipeToExecuteBehavior();
        this.updateSwipeActionsBehavior();
        this.updateCollapsibleGroupsBehavior();
        this._updateHeader();
        this._updateFooter();
        this._android._itemClickListener = new ListViewItemClickListener(new WeakRef(this));
        this._android.addItemClickListener(this._android._itemClickListener);
        return this._rootLayout;
    }
    setupRecycler() {
        this.recycledViewPool = new com.telerik.widget.list.RecycledViewPool();
        this.recycledViewPoolDisposeListener = new com.telerik.widget.list.RecycledViewPool.ViewPoolListener({
            onViewHolderDisposed: (holder) => {
                const view = holder['nsView']?._subViews[0];
                if (!view) {
                    return;
                }
                if (this._viewHolders) {
                    this._viewHolders = this._viewHolders.filter((v) => v !== holder);
                }
                if (this._viewHolders) {
                    this._swipeHolders = this._swipeHolders.filter((v) => v !== holder);
                }
                holder[viewIsRecycled] = true;
                const internalLoadingArgs = {
                    eventName: listViewCommonModule.RadListView.itemDisposingInternalEvent,
                    index: holder.getAdapterPosition(),
                    object: this,
                    view,
                    android: holder,
                };
                this.notify(internalLoadingArgs);
                if (holder['nsView'].parent) {
                    // ensure the holder view is disposed
                    holder['nsView'].parent._removeView(holder['nsView']);
                }
            },
        });
        this.recycledViewPool.mListener = this.recycledViewPoolDisposeListener;
        this.recyclerListener = new androidx.recyclerview.widget.RecyclerView.RecyclerListener({
            onViewRecycled: (holder) => {
                const view = holder['nsView']?._subViews[0];
                if (!view) {
                    return;
                }
                holder[viewIsRecycled] = true;
                const internalLoadingArgs = {
                    eventName: listViewCommonModule.RadListView.itemRecyclingInternalEvent,
                    index: holder.getAdapterPosition(),
                    object: this,
                    view,
                    android: holder,
                };
                this.notify(internalLoadingArgs);
            },
        });
        this._android.setRecyclerListener(this.recyclerListener);
        this._android.setRecycledViewPool(this.recycledViewPool);
    }
    initNativeView() {
        super.initNativeView();
        if (this._androidViewId < 0) {
            this._androidViewId = android.view.View.generateViewId();
        }
        this._android.setId(this._androidViewId);
    }
    templateKeyToNativeItem(key) {
        if (!this.templateTypeNumberString) {
            this.templateTypeNumberString = new Map();
            this._currentNativeItemType = 0;
            this._itemTemplatesInternal.forEach((v, i) => {
                this.templateTypeNumberString.set(v.key, this._currentNativeItemType);
                this.setNativePoolSize(v.key, this._currentNativeItemType);
                this._currentNativeItemType++;
            });
            this._currentNativeItemType = Math.max(this._itemTemplatesInternal.length, 100);
            // templates will be numbered 0,1,2,3... for named templates
            // default/unnamed templates will be numbered 100, 101, 102, 103...
        }
        if (!this.templateTypeNumberString.has(key)) {
            this.templateTypeNumberString.set(key, this._currentNativeItemType);
            this.setNativePoolSize(key, this._currentNativeItemType);
            this._currentNativeItemType++;
        }
        return this.templateTypeNumberString.get(key);
    }
    nativeItemToTemplateKey(item) {
        let result;
        this.templateTypeNumberString?.forEach((value, key, map) => {
            if (value === item) {
                result = key;
            }
        }, this);
        return result;
    }
    resetTemplateList() {
        this.templateTypeNumberString = null;
    }
    setNativePoolSize(key, nativeIndex) {
        if (this.desiredPoolSize.has(key)) {
            this._android.getRecycledViewPool().setMaxRecycledViews(nativeIndex, this.desiredPoolSize.get(key));
        }
        else {
            if (this.defaultPoolSize >= 0) {
                this._android.getRecycledViewPool().setMaxRecycledViews(nativeIndex, this.defaultPoolSize);
            }
        }
    }
    setPoolSizes() {
        if (!this._android || !this.templateTypeNumberString) {
            return;
        }
        this.desiredPoolSize.forEach((v, k) => {
            if (this.templateTypeNumberString.has(k)) {
                this._android.getRecycledViewPool().setMaxRecycledViews(this.templateTypeNumberString.get(k), v);
            }
        });
    }
    setPoolSize(key, size) {
        this.desiredPoolSize.set(key, size);
        this.setPoolSizes();
    }
    disposeNativeView() {
        if (this._android._listViewAdapter) {
            this._android._listViewAdapter = null;
        }
        if (this._android._nativeScrollStateListener) {
            this._android.removeOnScrollListener(this._android._nativeScrollStateListener);
            this._android._nativeScrollStateListener.owner = null;
        }
        if (this._selectionBehavior) {
            this._android.removeBehavior(this._selectionBehavior);
            this._selectionBehavior = undefined;
        }
        if (this._reorderBehavior) {
            this._android.removeBehavior(this._reorderBehavior);
            this._reorderBehavior['nsOwner'] = null;
            this._reorderBehavior = undefined;
        }
        if (this._loadOnDemandBehavior) {
            this._android.removeBehavior(this._loadOnDemandBehavior);
            this._loadOnDemandBehavior = undefined;
        }
        if (this._swipeExecuteBehavior) {
            this._android.removeBehavior(this._swipeExecuteBehavior);
            this._swipeExecuteBehavior = undefined;
        }
        if (this._swipeActionsBehavior) {
            this._android.removeBehavior(this._swipeActionsBehavior);
            this._swipeActionsBehavior = undefined;
        }
        if (this._pullToRefreshBehavior) {
            this._android.removeBehavior(this._pullToRefreshBehavior);
            this._pullToRefreshBehavior = undefined;
        }
        if (this._android) {
            this._android.setAdapter(null);
        }
        if (this.listViewLayout) {
            this.listViewLayout.owner = null;
            this.listViewLayout = undefined;
        }
        if (this._listViewAdapter) {
            this._listViewAdapter.owner = null;
            this._listViewAdapter = undefined;
        }
        if (this._android._groupDescriptorFunction) {
            this._android._groupDescriptorFunction.owner = null;
        }
        if (this._android._filterDescriptorFunction) {
            this._android._filterDescriptorFunction.owner = null;
        }
        if (this._android._sortDescriptorFunction) {
            this._android._sortDescriptorFunction.owner = null;
        }
        if (this._android._itemClickListener) {
            this._android._itemClickListener.owner = null;
        }
        if (this._android._swipeActionsListener) {
            this._android._swipeActionsListener.owner = null;
        }
        if (this._android._swipeExecuteListener) {
            this._android._swipeExecuteListener.owner = null;
        }
        if (this._android._swipeRefreshListener) {
            this._android._swipeRefreshListener.owner = null;
        }
        if (this._android._loadOnDemandListener) {
            this._android._loadOnDemandListener.owner = null;
        }
        if (this._android._itemReorderListener) {
            this._android._itemReorderListener.owner = null;
        }
        if (this._android._selectionChangedListener) {
            this._android._selectionChangedListener.owner = null;
        }
        this.clearEmbeddedViews();
        this._viewHolders = [];
        this._viewHolderChildren = [];
        this._swipeHolders = [];
        super.disposeNativeView();
    }
    _resetCurrentId() {
        this._currentId = 0;
    }
    _getUniqueItemId() {
        return this._currentId++;
    }
    get androidListView() {
        return this._android;
    }
    get swipeActionsBehavior() {
        return this._swipeActionsBehavior;
    }
    get swipeExecuteBehavior() {
        return this._swipeExecuteBehavior;
    }
    get _childrenCount() {
        let templatesCount = 0;
        if (this._headerView) {
            templatesCount++;
        }
        if (this._footerView) {
            templatesCount++;
        }
        if (this._listViewAdapter === undefined) {
            return 0;
        }
        if (!this._listViewAdapter._viewHolders) {
            return 0;
        }
        return this._listViewAdapter._viewHolders.length + this._listViewAdapter._swipeHolders.length + templatesCount;
    }
    eachChildView(callback) {
        if (this._headerView) {
            callback(this._headerView);
        }
        if (this._footerView) {
            callback(this._footerView);
        }
        if (this._listViewAdapter === undefined) {
            return;
        }
        if (this._listViewAdapter._viewHolders) {
            this._listViewAdapter._viewHolders.forEach(function (value, key) {
                callback(value['nsView']);
            }, this);
        }
        if (this._listViewAdapter._swipeHolders) {
            this._listViewAdapter._swipeHolders.forEach(function (value, key) {
                callback(value['nsView']);
            }, this);
        }
    }
    _toggleSelectionColor(view, isSelected) {
        if (!view) {
            return;
        }
        const selectedColor = this.itemSelectedBackgroundColor ? this.itemSelectedBackgroundColor : new Color('#20000000');
        if (isSelected) {
            view.backgroundColor = selectedColor;
        }
        else {
            view.backgroundColor = view['nsMainBackgroundColor'];
        }
    }
    _getViewLayoutParams() {
        const layoutParams = new org.nativescript.widgets.CommonLayoutParams();
        if (this.listViewLayout instanceof ListViewLinearLayout) {
            if (this.listViewLayout.scrollDirection === listViewCommonModule.ListViewScrollDirection.Vertical) {
                layoutParams.width = org.nativescript.widgets.CommonLayoutParams.MATCH_PARENT;
                layoutParams.height = org.nativescript.widgets.CommonLayoutParams.WRAP_CONTENT;
            }
            else if (this.listViewLayout.scrollDirection === listViewCommonModule.ListViewScrollDirection.Horizontal) {
                layoutParams.width = org.nativescript.widgets.CommonLayoutParams.WRAP_CONTENT;
                layoutParams.height = org.nativescript.widgets.CommonLayoutParams.MATCH_PARENT;
            }
        }
        return layoutParams;
    }
    isItemSelected(item) {
        if (this._selectionBehavior) {
            const nativeSelectedItems = this._selectionBehavior.selectedItems();
            for (let i = 0; i < nativeSelectedItems.size(); i++) {
                const nativeSelectedItem = nativeSelectedItems.get(i);
                const currentNativeIndex = this._listViewAdapter.getItems().indexOf(nativeSelectedItem);
                const sourceSelectedItem = this.getItemAtIndex(currentNativeIndex);
                if (sourceSelectedItem === item) {
                    return true;
                }
            }
        }
        return false;
    }
    selectAll() {
        super.selectAll();
        if (!this.items) {
            return;
        }
        if (this._selectionBehavior) {
            com.telerik.widget.list.Utils.selectAll(true, this.items.length, this._selectionBehavior);
        }
    }
    deselectAll() {
        if (!this.items) {
            return;
        }
        if (this._selectionBehavior) {
            com.telerik.widget.list.Utils.selectAll(false, this.items.length, this._selectionBehavior);
        }
    }
    selectItemAt(index) {
        if (this._selectionBehavior) {
            this._selectionBehavior.changeIsSelected(index, true);
        }
    }
    deselectItemAt(index) {
        if (this._selectionBehavior) {
            this._selectionBehavior.changeIsSelected(index, false);
        }
    }
    getViewForItem(item) {
        if (item === undefined) {
            throw new Error('Item must be an object from the currently assigned source.');
        }
        if (this._listViewAdapter === undefined) {
            return undefined;
        }
        return this._listViewAdapter.getViewForItem(item);
    }
    getSelectedItems() {
        if (this._selectionBehavior) {
            const selectedItems = new Array();
            const nativeSelectedItems = this._selectionBehavior.selectedItems();
            for (let i = 0; i < nativeSelectedItems.size(); i++) {
                selectedItems.push(this.getItemAtIndex(this._android.getAdapter().getItems().indexOf(nativeSelectedItems.get(i))));
            }
            return selectedItems;
        }
        return super.getSelectedItems();
    }
    _getGroupTemplateBindingContext() {
        return null;
    }
    _getDefaultGroupContent() {
        const parentStack = new StackLayout();
        const lbl = new Label();
        lbl.bind({
            targetProperty: 'text',
            sourceProperty: '$value.category',
        });
        lbl.height = 50;
        lbl.backgroundColor = 'white';
        lbl.padding = 15;
        parentStack.addChild(lbl);
        return parentStack;
    }
    onPullToRefreshStyleChanged(oldValue, newValue) {
        this.updatePullToRefreshBehavior();
    }
    onItemViewLoaderChanged() {
        if (this.itemViewLoader) {
            this.updateSelectionBehavior();
            this.updateReorderBehavior();
            this.updateLoadOnDemandBehavior();
            this.updatePullToRefreshBehavior();
            this.updateSwipeToExecuteBehavior();
            this.loadData();
        }
    }
    onItemViewDisposerChanged() { }
    onNativeScriptViewAddedChanged() { }
    onHeaderItemTemplateChanged(oldValue, newValue) {
        super.onHeaderItemTemplateChanged(oldValue, newValue);
        if (this._android) {
            this._updateHeader();
            this.hardResetAdapter();
        }
    }
    onFooterItemTemplateChanged(oldValue, newValue) {
        super.onFooterItemTemplateChanged(oldValue, newValue);
        if (this._android) {
            this._updateFooter();
            this.hardResetAdapter();
        }
    }
    onListViewLayoutChanged(oldValue, newValue) {
        super.onListViewLayoutChanged(oldValue, newValue);
        if (oldValue) {
            const newLayout = oldValue;
            newLayout._reset();
        }
        this._scrolledPixels = 0;
        if (newValue) {
            const newLayout = newValue;
            newLayout._init(new WeakRef(this));
        }
    }
    onItemTemplateSelectorChanged(oldValue, newValue) {
        super.onItemTemplateSelectorChanged(oldValue, newValue);
        if (this._listViewAdapter) {
            this._listViewAdapter.clearTemplateTypes();
        }
        this.loadData();
    }
    onItemTemplateChanged(oldValue, newValue) {
        super.onItemTemplateChanged(oldValue, newValue); // TODO: update current template with the new one
        this.loadData();
        this.hardResetAdapter();
    }
    onGroupTemplateChanged(oldValue, newValue) {
        super.onGroupTemplateChanged(oldValue, newValue);
        if (this._android) {
            this._updateHeader();
            this._updateFooter();
        }
    }
    onItemTemplatesChanged(oldValue, newValue) {
        super.onItemTemplatesChanged(oldValue, newValue);
        this.loadData();
        this.hardResetAdapter();
    }
    itemSwipeTemplateChanged(oldValue, newValue) {
        super.onItemSwipeTemplateChanged(oldValue, newValue);
        this.updateSwipeToExecuteBehavior();
        this.updateSwipeActionsBehavior();
        this.loadData();
        this.hardResetAdapter();
    }
    onMultipleSelectionChanged(oldValue, newValue) {
        super.onMultipleSelectionChanged(oldValue, newValue);
        this.updateSelectionBehavior();
    }
    onItemReorderChanged(oldValue, newValue) {
        super.onItemReorderChanged(oldValue, newValue);
        this.updateReorderBehavior();
    }
    onItemSwipeChanged(oldValue, newValue) {
        super.onItemSwipeChanged(oldValue, newValue);
        this.updateSwipeToExecuteBehavior();
    }
    onSwipeActionsChanged(oldValue, newValue) {
        super.onSwipeActionsChanged(oldValue, newValue);
        this.updateSwipeActionsBehavior();
    }
    onPullToRefreshChanged(oldValue, newValue) {
        super.onPullToRefreshChanged(oldValue, newValue);
        this.updatePullToRefreshBehavior();
    }
    onLoadOnDemandModeChanged(oldValue, newValue) {
        super.onLoadOnDemandModeChanged(oldValue, newValue);
        this.setLoadOnDemandModeInternal(newValue);
    }
    onLoadOnDemandBufferSizeChanged(oldValue, newValue) {
        super.onLoadOnDemandBufferSizeChanged(oldValue, newValue);
        this.updateLoadOnDemandBehavior();
    }
    onSelectionBehaviorChanged(oldValue, newValue) {
        super.onSelectionBehaviorChanged(oldValue, newValue);
        this.updateSelectionBehavior();
    }
    onLoadOnDemandItemTemplateChanged(oldValue, newValue) {
        super.onLoadOnDemandItemTemplateChanged(oldValue, newValue);
        this.updateLoadOnDemandBehavior();
        this.hardResetAdapter();
    }
    onSourceCollectionChanged(data) {
        if (this._android === undefined) {
            return;
        }
        if (this._listViewAdapter) {
            if (data.action === ChangeType.Update) {
                this._listViewAdapter.update(data.index);
            }
            else if (data.action === ChangeType.Delete) {
                this._listViewAdapter.remove(data.index);
            }
            else if (data.action === ChangeType.Add) {
                if (isNaN(data.index)) {
                    this._listViewAdapter.rangeAdd(data.addedCount);
                    this._currentId += data.addedCount;
                }
                else {
                    this._listViewAdapter.rangeAdd(data.index, data.addedCount);
                    this._currentId += data.addedCount;
                }
            }
            else if (data.action === ChangeType.Splice) {
                const removedCount = data.removed && data.removed.length > 0 ? data.removed.length : 0;
                const addedCount = data.addedCount;
                this._listViewAdapter.slice(data.index, removedCount, addedCount);
                if (addedCount > 0) {
                    this._currentId += data.addedCount;
                }
            }
        }
    }
    onEnableCollapsibleGroupsChanged(oldValue, newValue) {
        this.loadData();
    }
    onItemSelectedBackgroundColorChanged(oldValue, newValue) {
        this.loadData();
    }
    onGroupingFunctionChanged(oldValue, newValue) {
        super.onGroupingFunctionChanged(oldValue, newValue);
        if (newValue) {
            this.loadData();
        }
        else {
            this.clearGroupDescriptors();
        }
    }
    onFilteringFunctionChanged(oldValue, newValue) {
        if (newValue) {
            this.loadData();
        }
        else {
            this.clearFilterDescriptors();
        }
    }
    onSortingFunctionChanged(oldValue, newValue) {
        if (newValue) {
            this.loadData();
        }
        else {
            this.clearSortDescriptors();
        }
    }
    subscribeForNativeScrollEvents() {
        this._android._nativeScrollStateListener = new ListViewNativeScrollListener(new WeakRef(this));
        this._android.addOnScrollListener(this._android._nativeScrollStateListener);
    }
    bindingContextChanged(data) {
        if (this._headerView) {
            this._headerView.bindingContext = data.value;
        }
        if (this._footerView) {
            this._footerView.bindingContext = data.value;
        }
    }
    refresh() {
        super.refresh();
        // this.recreateEmbeddedViews();
        this.loadData();
        this.forceRefreshLayout();
    }
    forceRefreshLayout() {
        // Seems StaggeredGridLayoutManager has a bug: https://stackoverflow.com/questions/26860875/recyclerview-staggeredgridlayoutmanager-refresh-bug
        // resetting LayoutManager does the trick
        if (this.listViewLayout !== undefined) {
            this.listViewLayout.forceRefreshLayout();
        }
    }
    // Clears all views and related views from all templates.
    // Usage: Use when you want to fully clear all views created by the template parsing mechanisum of the RadListView.
    clearEmbeddedViews() {
        if (this.itemViewDisposer !== undefined) {
            this.itemViewDisposer();
        }
    }
    // only recreateEmbeddedViews if it's cleared
    recreateEmbeddedViews() {
        if (this.itemViewDisposer !== undefined) {
            this._updateHeader();
            this._updateFooter();
        }
    }
    notifyPullToRefreshFinished(enableLoadOnDemand) {
        if (!this._pullToRefreshBehavior) {
            return;
        }
        if (!this._android) {
            return;
        }
        if (enableLoadOnDemand) {
            this._returnLoadOnDemandMode();
        }
        this._android.getAdapter().notifyRefreshFinished();
    }
    notifyLoadOnDemandFinished(disableLoadOnDemand) {
        if (!this._loadOnDemandBehavior) {
            return;
        }
        if (!this._android) {
            return;
        }
        if (disableLoadOnDemand) {
            this._disableLoadOnDemand();
        }
        if (this._android.getAdapter()) {
            this._android.getAdapter().notifyLoadingFinished();
        }
    }
    notifyAppendItemsOnDemandFinished(_itemsCount, disableLoadOnDemand) {
        this.notifyLoadOnDemandFinished(disableLoadOnDemand);
    }
    notifySwipeToExecuteFinished() {
        if (this._swipeActionsBehavior) {
            this._swipeActionsBehavior.endExecute();
        }
        if (!this._swipeExecuteBehavior) {
            return;
        }
        if (!this._android) {
            return;
        }
        if (this._android.getAdapter()) {
            this._android.getAdapter().notifySwipeExecuteFinished();
        }
    }
    retrieveNativeSnapMode(snapMode) {
        let nativeSnapMode = com.telerik.widget.list.SnappingSmoothScroller.SNAP_NONE;
        switch (snapMode) {
            case listViewCommonModule.ListViewItemSnapMode.Start:
                nativeSnapMode = com.telerik.widget.list.SnappingSmoothScroller.SNAP_TOP;
                break;
            case listViewCommonModule.ListViewItemSnapMode.End:
                nativeSnapMode = com.telerik.widget.list.SnappingSmoothScroller.SNAP_BOTTOM;
                break;
            case listViewCommonModule.ListViewItemSnapMode.Center:
                nativeSnapMode = com.telerik.widget.list.SnappingSmoothScroller.SNAP_CENTER;
                break;
        }
        return nativeSnapMode;
    }
    scrollToIndex(index, animate = false, snapMode = listViewCommonModule.ListViewItemSnapMode.Auto) {
        const nativeIndex = this._getNativePosition(index);
        if (index === 0) {
            // scrollToPosition does not fire onScrolledPixelsChangedBy to reset internal _scrolledPixels which makes tracking further getScrollOffset incorrect
            // always reset when being scrolled back to top
            this._scrolledPixels = 0;
        }
        if (this._android) {
            const nativeSnapMode = this.retrieveNativeSnapMode(snapMode);
            if (!animate) {
                this._android.scrollToPosition(nativeIndex, nativeSnapMode);
            }
            else {
                this._android.smoothScrollToPosition(nativeIndex, nativeSnapMode);
            }
        }
    }
    getScrollOffset() {
        return Utils.layout.toDeviceIndependentPixels(this._scrolledPixels);
    }
    onScrolledPixelsChangedBy(by) {
        this._scrolledPixels += by;
        if (this._scrolledPixels < 0 || !this._isScrolled()) {
            this._scrolledPixels = 0;
        }
    }
    _isScrolled() {
        if (this._android) {
            if (this.listViewLayout.scrollDirection === listViewCommonModule.ListViewScrollDirection.Vertical) {
                return this._android.computeVerticalScrollOffset() > 0;
            }
            if (this.listViewLayout.scrollDirection === listViewCommonModule.ListViewScrollDirection.Horizontal) {
                return this._android.computeHorizontalScrollOffset() > 0;
            }
        }
        return false;
    }
    scrollWithAmount(amount, animate) {
        if (this._android) {
            const layoutVertical = this.listViewLayout.scrollDirection === listViewCommonModule.ListViewScrollDirection.Vertical ? true : false;
            amount = Utils.layout.toDevicePixels(amount);
            if (layoutVertical) {
                if (animate) {
                    this._android.smoothScrollBy(0, amount);
                }
                else {
                    this._android.scrollBy(0, amount);
                }
            }
            else {
                if (animate) {
                    this._android.smoothScrollBy(amount, 0);
                }
                else {
                    this._android.scrollBy(amount, 0);
                }
            }
        }
    }
    disposeViewHolderViews(views) {
        views.forEach((element) => {
            if (!element.parent) {
                // TODO: investigate why this can happen
                return;
            }
            if (!(element.parent instanceof RadListView)) {
                this._removeView(element.parent);
            }
            element.parent._removeView(element);
        });
        views = new Array();
    }
    _updateHeader() {
        if (!this._android) {
            return;
        }
        const headerView = this.getViewForViewType(listViewCommonModule.ListViewViewType.HeaderView);
        this._android.setHeaderView(null);
        const layoutParams = this._getViewLayoutParams();
        if (headerView) {
            headerView.bindingContext = this.bindingContext;
            this.disposeViewHolderViews(this._headerViewHolderChildren);
            this._headerViewHolderChildren.push(headerView);
            this._addView(headerView);
            headerView.nativeView.setLayoutParams(layoutParams);
            this._android.setHeaderView(headerView.nativeView);
            this._headerView = headerView;
        }
    }
    _updateFooter() {
        if (!this._android) {
            return;
        }
        const footerView = this.getViewForViewType(listViewCommonModule.ListViewViewType.FooterView);
        this._android.setFooterView(null);
        const layoutParams = this._getViewLayoutParams();
        if (footerView) {
            footerView.bindingContext = this.bindingContext;
            this.disposeViewHolderViews(this._footerViewHolderChildren);
            this._footerViewHolderChildren.push(footerView);
            this._addView(footerView);
            footerView.nativeView.setLayoutParams(layoutParams);
            this._android.setFooterView(footerView.nativeView);
            this._footerView = footerView;
        }
    }
    updateSwipeActionsBehavior() {
        if (!this._android || !(this.itemSwipeTemplate || this.itemViewLoader)) {
            return;
        }
        if (this.swipeActions === true) {
            if (!this._swipeActionsBehavior) {
                this._swipeActionsBehavior = new com.telerik.widget.list.SwipeActionsBehavior();
                this._swipeActionsBehavior.setDockMode(com.telerik.widget.list.SwipeActionsBehavior.SwipeDockMode.DockAtLimit);
                this._android.addBehavior(this._swipeActionsBehavior);
                this._android._swipeActionsListener = new ListViewSwipeActionsListener(new WeakRef(this));
                this._swipeActionsBehavior.addListener(this._android._swipeActionsListener);
            }
        }
        else {
            if (this._swipeActionsBehavior) {
                this._android.removeBehavior(this._swipeActionsBehavior);
                if (this._android._swipeActionsListener) {
                    this._swipeActionsBehavior.removeListener(this._android._swipeActionsListener);
                    this._android._swipeActionsListener.owner = null;
                    this._android._swipeActionsListener = null;
                }
                this._swipeActionsBehavior = null;
            }
        }
    }
    // TODO: This should be deprecated and removed
    updateSwipeToExecuteBehavior() {
        if (!this._android || !(this.itemSwipeTemplate || this.itemViewLoader)) {
            return;
        }
        if (this.itemSwipe === true) {
            if (!this._swipeExecuteBehavior) {
                this._swipeExecuteBehavior = new com.telerik.widget.list.SwipeExecuteBehavior();
                this._swipeExecuteBehavior.setAutoDissolve(false);
                this._android.addBehavior(this._swipeExecuteBehavior);
                this._android._swipeExecuteListener = new ListViewSwipeExecuteListener(new WeakRef(this));
                this._swipeExecuteBehavior.addListener(this._android._swipeExecuteListener);
            }
        }
        else {
            if (this._swipeExecuteBehavior) {
                this._android.removeBehavior(this._swipeExecuteBehavior);
                if (this._android._swipeExecuteListener) {
                    this._swipeExecuteBehavior.removeListener(this._android._swipeExecuteListener);
                    this._android._swipeExecuteListener.owner = null;
                    this._android._swipeExecuteListener = null;
                }
                this._swipeExecuteBehavior = null;
            }
        }
    }
    updatePullToRefreshBehavior() {
        if (!this._android) {
            return;
        }
        if (this.pullToRefresh === true) {
            if (!this._pullToRefreshBehavior) {
                this._pullToRefreshBehavior = new com.telerik.widget.list.SwipeRefreshBehavior();
                this._android.addBehavior(this._pullToRefreshBehavior);
                this._android._swipeRefreshListener = new ListViewSwipeRefreshListener(new WeakRef(this));
                this._pullToRefreshBehavior.addListener(this._android._swipeRefreshListener);
            }
            if (this._pullToRefreshBehavior && this.pullToRefreshStyle !== undefined) {
                const style = this.pullToRefreshStyle;
                if (style.indicatorColor) {
                    const colorsArray = new Array();
                    colorsArray.push(style.indicatorColor.android);
                    this._pullToRefreshBehavior.swipeRefresh().setColorSchemeColors(colorsArray);
                }
                if (style.indicatorBackgroundColor) {
                    this._pullToRefreshBehavior.swipeRefresh().setProgressBackgroundColorSchemeColor(style.indicatorBackgroundColor.android);
                }
            }
        }
        else {
            if (this._pullToRefreshBehavior) {
                this._android.removeBehavior(this._pullToRefreshBehavior);
                if (this._android._swipeRefreshListener) {
                    this._pullToRefreshBehavior.removeListener(this._android._swipeRefreshListener);
                    this._android._swipeRefreshListener.owner = null;
                    this._android._swipeRefreshListener = null;
                }
                this._pullToRefreshBehavior = null;
            }
        }
    }
    updateCollapsibleGroupsBehavior() {
        if (!this._android || !this.enableCollapsibleGroups) {
            return;
        }
        if (this.enableCollapsibleGroups) {
            if (!this._collapsibleGroupsBehavior) {
                this._collapsibleGroupsBehavior = new com.telerik.widget.list.CollapsibleGroupsBehavior();
                this._android.addBehavior(this._collapsibleGroupsBehavior);
            }
        }
        else {
            if (this._collapsibleGroupsBehavior) {
                this._android.removeBehavior(this._collapsibleGroupsBehavior);
                this._collapsibleGroupsBehavior = null;
            }
        }
    }
    setLoadOnDemandModeInternal(value) {
        this._loadOnDemandModeInternal = value;
        this.updateLoadOnDemandBehavior();
    }
    updateLoadOnDemandBehavior() {
        if (!this._android) {
            return;
        }
        if (!this._loadOnDemandBehavior) {
            const loadOnDemandView = this.getViewForViewType(listViewCommonModule.ListViewViewType.LoadOnDemandView);
            if (loadOnDemandView) {
                this.disposeViewHolderViews(this._loadOnDemandViewHolderChildren);
                this._loadOnDemandViewHolderChildren.push(loadOnDemandView);
                this._addView(loadOnDemandView);
                switch (this._loadOnDemandModeInternal) {
                    case listViewCommonModule.ListViewLoadOnDemandMode.Manual:
                        this._loadOnDemandBehavior = new com.telerik.widget.list.LoadOnDemandBehavior(loadOnDemandView.nativeView, new android.widget.LinearLayout(this._context));
                        break;
                    case listViewCommonModule.ListViewLoadOnDemandMode.Auto:
                    default: {
                        this._loadOnDemandBehavior = new com.telerik.widget.list.LoadOnDemandBehavior(new android.widget.LinearLayout(this._context), loadOnDemandView.nativeView);
                        break;
                    }
                }
            }
            else {
                this._loadOnDemandBehavior = new com.telerik.widget.list.LoadOnDemandBehavior();
            }
            this._android.addBehavior(this._loadOnDemandBehavior);
            this._android._loadOnDemandListener = new ListViewLoadOnDemandListener(new WeakRef(this));
            this._loadOnDemandBehavior.addListener(this._android._loadOnDemandListener);
        }
        if (!isNaN(this.loadOnDemandBufferSize)) {
            this._loadOnDemandBehavior.setMaxRemainingItems(this.loadOnDemandBufferSize);
        }
        switch (this._loadOnDemandModeInternal) {
            case listViewCommonModule.ListViewLoadOnDemandMode.Manual:
                this._loadOnDemandBehavior.setEnabled(true);
                this._loadOnDemandBehavior.setMode(com.telerik.widget.list.LoadOnDemandBehavior.LoadOnDemandMode.MANUAL);
                break;
            case listViewCommonModule.ListViewLoadOnDemandMode.Auto:
                this._loadOnDemandBehavior.setEnabled(true);
                this._loadOnDemandBehavior.setMode(com.telerik.widget.list.LoadOnDemandBehavior.LoadOnDemandMode.AUTOMATIC);
                break;
            default: {
                this._loadOnDemandBehavior.setEnabled(false);
                break;
            }
        }
    }
    updateReorderBehavior() {
        if (!this._android) {
            return;
        }
        if (this.itemReorder) {
            if (!this._reorderBehavior) {
                ensureExtendedReorderWithHandlesBehavior();
                this._reorderBehavior = this.reorderMode === listViewCommonModule.ListViewReorderMode.HoldAndDrag ? new com.telerik.widget.list.ItemReorderBehavior() : new ExtendedReorderWithHandlesBehaviorClass(-1);
                this._reorderBehavior['nsOwner'] = new WeakRef(this);
                this._android.addBehavior(this._reorderBehavior);
                this._android._itemReorderListener = new ListViewItemReorderListener(new WeakRef(this));
                this._reorderBehavior.addListener(this._android._itemReorderListener);
            }
        }
        else {
            if (this._reorderBehavior) {
                this._android.removeBehavior(this._reorderBehavior);
                if (this._android._itemReorderListener) {
                    this._reorderBehavior.removeListener(this._android._itemReorderListener);
                    this._android._itemReorderListener.owner = null;
                    this._android._itemReorderListener = null;
                }
                this._reorderBehavior['nsOwner'] = null;
                this._reorderBehavior = undefined;
            }
        }
    }
    updateSelectionBehavior() {
        if (!this._android) {
            return;
        }
        if (!this._selectionBehavior) {
            this._selectionBehavior = new com.telerik.widget.list.SelectionBehavior();
            this._android.addBehavior(this._selectionBehavior);
            this._android._selectionChangedListener = new ListViewSelectionChangedListener(new WeakRef(this));
            this._selectionBehavior.addListener(this._android._selectionChangedListener);
        }
        if (this.multipleSelection) {
            this._selectionBehavior.setSelectionMode(com.telerik.widget.list.SelectionBehavior.SelectionMode.MULTIPLE);
        }
        else {
            this._selectionBehavior.setSelectionMode(com.telerik.widget.list.SelectionBehavior.SelectionMode.SINGLE);
        }
        switch (this.selectionBehavior) {
            case listViewCommonModule.ListViewSelectionBehavior.None:
                this._android.removeBehavior(this._selectionBehavior);
                if (this._android._selectionChangedListener) {
                    this._selectionBehavior.removeListener(this._android._selectionChangedListener);
                    this._android._selectionChangedListener.owner = null;
                    this._android._selectionChangedListener = null;
                }
                this._selectionBehavior = undefined;
                break;
            case listViewCommonModule.ListViewSelectionBehavior.LongPress:
                this._selectionBehavior.setSelectionOnTouch(com.telerik.widget.list.SelectionBehavior.SelectionOnTouch.NEVER);
                break;
            default: {
                this._selectionBehavior.setSelectionOnTouch(com.telerik.widget.list.SelectionBehavior.SelectionOnTouch.ALWAYS);
            }
        }
    }
    clearFilterDescriptors() {
        if (!this._listViewAdapter) {
            return;
        }
        this._listViewAdapter.clearFilterDescriptors();
    }
    clearGroupDescriptors() {
        if (!this._listViewAdapter) {
            return;
        }
        this._listViewAdapter.clearGroupDescriptors();
    }
    clearSortDescriptors() {
        if (!this._listViewAdapter) {
            return;
        }
        this._listViewAdapter.clearSortDescriptors();
    }
    loadData() {
        if (!this.items || !this._android) {
            return;
        }
        const dsLength = this.items.length;
        this._resetCurrentId();
        const nativeSource = com.telerik.widget.list.Utils.createSource(dsLength);
        this._currentId += dsLength;
        if (this._listViewAdapter) {
            // this._listViewAdapter.disposeViewHolderViews();
            this._listViewAdapter.owner = null;
        }
        if (this._android._groupDescriptorFunction) {
            this._android._groupDescriptorFunction.owner = null;
        }
        if (this._android._filterDescriptorFunction) {
            this._android._filterDescriptorFunction.owner = null;
        }
        if (this._android._sortDescriptorFunction) {
            this._android._sortDescriptorFunction.owner = null;
        }
        if (!this.isDataOperationsEnabled) {
            this._listViewAdapter = new ListViewAdapterClass(nativeSource, new WeakRef(this));
        }
        else {
            this._listViewAdapter = new ListViewDataSourceAdapterClass(nativeSource, new WeakRef(this));
        }
        this._android._listViewAdapter = this._listViewAdapter;
        if (this.isDataOperationsEnabled) {
            if (this.groupingFunction) {
                this._android._groupDescriptorFunction = new ListViewGroupDescriptor(new WeakRef(this));
                this._listViewAdapter.addGroupDescriptor(this._android._groupDescriptorFunction);
            }
            if (this.filteringFunction) {
                this._android._filterDescriptorFunction = new ListViewFilterDescriptor(new WeakRef(this));
                this._listViewAdapter.addFilterDescriptor(this._android._filterDescriptorFunction);
            }
            if (this.sortingFunction) {
                this._android._sortDescriptorFunction = new ListViewSortDescriptor(new WeakRef(this));
                this._listViewAdapter.addSortDescriptor(this._android._sortDescriptorFunction);
            }
        }
        this.resetAdapter(false);
        const args = {
            eventName: listViewCommonModule.RadListView.dataPopulatedEvent,
            object: this,
        };
        this.notify(args);
    }
    hardResetAdapter() {
        this.resetAdapter(true, false);
    }
    resetAdapter(removeViews = true, isCompatible = true) {
        if (!this._android) {
            return;
        }
        const savedState = this._android.getLayoutManager().onSaveInstanceState();
        if (isCompatible) {
            this._android.swapAdapter(this._listViewAdapter, removeViews);
        }
        else {
            this.clearEmbeddedViews();
            this.recreateEmbeddedViews();
            this._android.setAdapter(this._listViewAdapter);
            this.resetTemplateList();
        }
        this._android.getLayoutManager().onRestoreInstanceState(savedState);
        // this._listViewAdapter.notifyDataSetChanged();
    }
    _disableLoadOnDemand() {
        this.setLoadOnDemandModeInternal(listViewCommonModule.ListViewLoadOnDemandMode.None);
    }
    // TODO: This can be used for https://github.com/telerik/nativescript-ui-feedback/issues/790
    _returnLoadOnDemandMode() {
        this.setLoadOnDemandModeInternal(this.loadOnDemandMode);
    }
    // Returns the original index from the wrapper `items` collection while taking into account if grouping, filtering and/or sorting is enabled.
    _getOriginalIndex(inputIndex) {
        return this.isDataOperationsEnabled ? this._listViewAdapter.getItemId(inputIndex) : inputIndex;
    }
    // Returns the position of an element from the native data source while taking into account if grouping, filtering and/or sorting is enabled.
    _getNativePosition(inputIndex) {
        return this.isDataOperationsEnabled && this._listViewAdapter ? this._listViewAdapter.getPosition(inputIndex) : inputIndex;
    }
    getFirstVisiblePosition() {
        let firstIndex = undefined;
        const layoutManager = this._android.getLayoutManager();
        if (layoutManager) {
            if (layoutManager.findFirstVisibleItemPosition) {
                firstIndex = layoutManager.findFirstVisibleItemPosition();
            }
            else if (layoutManager.findFirstVisibleItemPositions) {
                // support for staggeredlayout
                firstIndex = layoutManager.findFirstVisibleItemPositions(new Array(1))[0];
            }
        }
        return firstIndex;
    }
}
export class AndroidLVLayoutBase extends listViewCommonModule.ListViewLayoutBase {
    get android() {
        return this._android;
    }
    _init(owner) {
        this.owner = owner;
        const ref = owner && owner.get();
        if (ref && ref._android) {
            this._onOwnerUICreated();
        }
    }
    _reset() {
        this.owner = null;
    }
    _onOwnerUICreated() {
        this._android = this.getLayoutManager();
        const owner = this.owner && this.owner.get();
        if (owner) {
            owner._android.setLayoutManager(this._android);
        }
        if (this.scrollDirection) {
            this.setLayoutOrientation(this.scrollDirection);
        }
        if (this.itemInsertAnimation) {
            this.updateItemAnimator(this.itemInsertAnimation);
        }
        if (this.itemDeleteAnimation) {
            this.updateItemAnimator(this.itemDeleteAnimation);
        }
    }
    reset() {
        const owner = this.owner && this.owner.get();
        if (owner) {
            owner._android.setLayoutManager(null);
        }
        this.owner = null;
    }
    getLayoutManager() {
        return undefined;
    }
    onScrollDirectionChanged(oldValue, newValue) {
        if (newValue && this._android) {
            this.setLayoutOrientation(newValue);
        }
    }
    onItemInsertAnimationChanged(oldValue, newValue) {
        if (this.owner && this.owner.get()) {
            this.updateItemAnimator(newValue);
        }
    }
    onItemDeleteAnimationChanged(oldValue, newValue) {
        if (this.owner && this.owner.get()) {
            this.updateItemAnimator(newValue);
        }
    }
    setLayoutOrientation(orientation) {
        this._android.setOrientation(orientation === listViewCommonModule.ListViewScrollDirection.Horizontal ? androidx.recyclerview.widget.LinearLayoutManager.HORIZONTAL : androidx.recyclerview.widget.LinearLayoutManager.VERTICAL);
    }
    updateItemAnimator(newAnimator) {
        const owner = this.owner && this.owner.get();
        if (!owner) {
            return;
        }
        if (!newAnimator) {
            owner._android.setItemAnimator(null);
            return;
        }
        switch (newAnimator) {
            case listViewCommonModule.ListViewItemAnimation.Fade: {
                owner._android.setItemAnimator(new com.telerik.widget.list.FadeItemAnimator());
                break;
            }
            case listViewCommonModule.ListViewItemAnimation.Scale: {
                owner._android.setItemAnimator(new com.telerik.widget.list.ScaleItemAnimator());
                break;
            }
            case listViewCommonModule.ListViewItemAnimation.Slide: {
                owner._android.setItemAnimator(new com.telerik.widget.list.SlideItemAnimator());
                break;
            }
            default:
                owner._android.setItemAnimator(null);
        }
    }
    forceRefreshLayout() { }
}
export class ListViewLinearLayout extends AndroidLVLayoutBase {
    constructor() {
        super();
    }
    getLayoutManager() {
        const owner = this.owner && this.owner.get();
        if (!owner) {
            return null;
        }
        return new androidx.recyclerview.widget.LinearLayoutManager(owner._context);
    }
}
export class ListViewGridLayout extends ListViewLinearLayout {
    constructor() {
        super();
    }
    onSpanCountPropertyChanged(oldValue, newValue) {
        this.onSpanCountChanged(oldValue, newValue);
    }
    onSpanCountChanged(oldValue, newValue) {
        if (!isNaN(+newValue) && this.android) {
            this.android.setSpanCount(newValue);
        }
    }
    onItemHeightChanged(oldValue, newValue) {
        console.log("Warning: Setting the 'itemHeight' property of 'ListViewGridLayout' is not supported by the Android platform.");
    }
    onItemWidthChanged(oldValue, newValue) {
        console.log("Warning: Setting the 'itemWidth' property of 'ListViewGridLayout' is not supported by the Android platform.");
    }
    getLayoutManager() {
        const owner = this.owner && this.owner.get();
        if (!owner) {
            return null;
        }
        this.spanCount = this.spanCount ? this.spanCount : 2;
        return new androidx.recyclerview.widget.GridLayoutManager(owner._context, this.spanCount);
    }
}
// NOTE: this property should be defined in common module, but inheritance will not be possible then
ListViewGridLayout.spanCountProperty = new Property({
    name: 'spanCount',
    defaultValue: undefined,
    valueConverter: parseInt,
    valueChanged: (target, oldValue, newValue) => {
        target.onSpanCountPropertyChanged(oldValue, newValue);
    },
});
ListViewGridLayout.spanCountProperty.register(ListViewGridLayout);
export class ListViewStaggeredLayout extends ListViewGridLayout {
    getLayoutManager() {
        const orientation = this.scrollDirection === listViewCommonModule.ListViewScrollDirection.Vertical ? androidx.recyclerview.widget.StaggeredGridLayoutManager.VERTICAL : androidx.recyclerview.widget.StaggeredGridLayoutManager.HORIZONTAL;
        this.spanCount = this.spanCount ? this.spanCount : 2;
        return new androidx.recyclerview.widget.StaggeredGridLayoutManager(this.spanCount, orientation);
    }
    forceRefreshLayout() {
        const owner = this.owner && this.owner.get();
        if (owner && owner._android) {
            if (!this._android) {
                this._onOwnerUICreated();
            }
            else {
                const orientation = this.scrollDirection === listViewCommonModule.ListViewScrollDirection.Vertical ? androidx.recyclerview.widget.StaggeredGridLayoutManager.VERTICAL : androidx.recyclerview.widget.StaggeredGridLayoutManager.HORIZONTAL;
                this.spanCount = this.spanCount ? this.spanCount : 2;
                const androidLayout = this._android;
                androidLayout.setSpanCount(this.spanCount);
                androidLayout.setOrientation(orientation);
                androidLayout.requestLayout();
            }
        }
    }
}
//# sourceMappingURL=index.android.js.map